{
    "kind": "NodeList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/nodes",
        "resourceVersion": "1099"
    },
    "items": [
        {
            "metadata": {
                "name": "minikube",
                "selfLink": "/api/v1/nodes/minikube",
                "uid": "17d30152-4bd6-4d7d-87d4-040085d043ad",
                "resourceVersion": "1061",
                "creationTimestamp": "2020-03-19T00:37:35Z",
                "labels": {
                    "beta.kubernetes.io/arch": "amd64",
                    "beta.kubernetes.io/os": "linux",
                    "kubernetes.io/arch": "amd64",
                    "kubernetes.io/hostname": "minikube",
                    "kubernetes.io/os": "linux",
                    "node-role.kubernetes.io/master": ""
                },
                "annotations": {
                    "kubeadm.alpha.kubernetes.io/cri-socket": "/var/run/dockershim.sock",
                    "node.alpha.kubernetes.io/ttl": "0",
                    "volumes.kubernetes.io/controller-managed-attach-detach": "true"
                }
            },
            "spec": {},
            "status": {
                "capacity": {
                    "cpu": "2",
                    "ephemeral-storage": "17784752Ki",
                    "hugepages-2Mi": "0",
                    "memory": "4035156Ki",
                    "pods": "110"
                },
                "allocatable": {
                    "cpu": "2",
                    "ephemeral-storage": "17784752Ki",
                    "hugepages-2Mi": "0",
                    "memory": "4035156Ki",
                    "pods": "110"
                },
                "conditions": [
                    {
                        "type": "MemoryPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-03-19T00:45:08Z",
                        "lastTransitionTime": "2020-03-19T00:37:31Z",
                        "reason": "KubeletHasSufficientMemory",
                        "message": "kubelet has sufficient memory available"
                    },
                    {
                        "type": "DiskPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-03-19T00:45:08Z",
                        "lastTransitionTime": "2020-03-19T00:37:31Z",
                        "reason": "KubeletHasNoDiskPressure",
                        "message": "kubelet has no disk pressure"
                    },
                    {
                        "type": "PIDPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-03-19T00:45:08Z",
                        "lastTransitionTime": "2020-03-19T00:37:31Z",
                        "reason": "KubeletHasSufficientPID",
                        "message": "kubelet has sufficient PID available"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastHeartbeatTime": "2020-03-19T00:45:08Z",
                        "lastTransitionTime": "2020-03-19T00:37:31Z",
                        "reason": "KubeletReady",
                        "message": "kubelet is posting ready status"
                    }
                ],
                "addresses": [
                    {
                        "type": "InternalIP",
                        "address": "192.168.99.119"
                    },
                    {
                        "type": "Hostname",
                        "address": "minikube"
                    }
                ],
                "daemonEndpoints": {
                    "kubeletEndpoint": {
                        "Port": 10250
                    }
                },
                "nodeInfo": {
                    "machineID": "d62aaabb14d34b138dcb1c54c7492c2c",
                    "systemUUID": "a0b7575e-b0ca-5044-991a-00e3357c2f52",
                    "bootID": "eb90bb60-b1e1-4a2f-acea-c8176424a702",
                    "kernelVersion": "4.19.94",
                    "osImage": "Buildroot 2019.02.9",
                    "containerRuntimeVersion": "docker://19.3.6",
                    "kubeletVersion": "v1.15.4",
                    "kubeProxyVersion": "v1.15.4",
                    "operatingSystem": "linux",
                    "architecture": "amd64"
                },
                "images": [
                    {
                        "names": [
                            "k8s.gcr.io/etcd:3.3.10"
                        ],
                        "sizeBytes": 258116302
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-apiserver:v1.15.4"
                        ],
                        "sizeBytes": 206884798
                    },
                    {
                        "names": [
                            "fluxcd/flux@sha256:ba4bd9ed8ea13ba4aa94d97b6ca285b6f3831fc5861369110dc19f238ac13201",
                            "fluxcd/flux:1.15.0"
                        ],
                        "sizeBytes": 193803850
                    },
                    {
                        "names": [
                            "fluxcd/helm-operator@sha256:1d50c9a65b2b37614d6c0366f43056c862dbc1c5471f72dfe1f3e223fea19eb1",
                            "fluxcd/helm-operator:0.10.1"
                        ],
                        "sizeBytes": 166405374
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-controller-manager:v1.15.4"
                        ],
                        "sizeBytes": 158784062
                    },
                    {
                        "names": [
                            "gcr.io/kubernetes-helm/tiller@sha256:f8002b91997fdc2c15a9c2aa994bea117b5b1683933f3144369862f0883c3c42",
                            "gcr.io/kubernetes-helm/tiller:v2.14.1"
                        ],
                        "sizeBytes": 94194761
                    },
                    {
                        "names": [
                            "kubernetesui/dashboard:v2.0.0-beta8"
                        ],
                        "sizeBytes": 90835427
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-proxy:v1.15.4"
                        ],
                        "sizeBytes": 82408284
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-scheduler:v1.15.4"
                        ],
                        "sizeBytes": 81107582
                    },
                    {
                        "names": [
                            "gcr.io/k8s-minikube/storage-provisioner:v1.8.1"
                        ],
                        "sizeBytes": 80815640
                    },
                    {
                        "names": [
                            "memcached@sha256:551e40a18e8ec261e2564d31006b09818a15e8e7d8038557177437ac28af9059",
                            "memcached:1.5.15"
                        ],
                        "sizeBytes": 62176023
                    },
                    {
                        "names": [
                            "k8s.gcr.io/coredns:1.3.1"
                        ],
                        "sizeBytes": 40303560
                    },
                    {
                        "names": [
                            "kubernetesui/metrics-scraper:v1.0.2"
                        ],
                        "sizeBytes": 40101552
                    },
                    {
                        "names": [
                            "k8s.gcr.io/pause:3.1"
                        ],
                        "sizeBytes": 742472
                    }
                ]
            }
        }
    ]
}
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/events",
        "resourceVersion": "1099"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-5c98db65d4-8zb2q.15fd8d898f13fbe9",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-5c98db65d4-8zb2q.15fd8d898f13fbe9",
                "uid": "6e2abdcb-58d4-48f5-aa2b-7e145b1a7566",
                "resourceVersion": "334",
                "creationTimestamp": "2020-03-19T00:37:45Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-5c98db65d4-8zb2q",
                "uid": "612ca953-d59b-43f5-9023-d461a16a7a00",
                "apiVersion": "v1",
                "resourceVersion": "327"
            },
            "reason": "FailedScheduling",
            "message": "0/1 nodes are available: 1 node(s) had taints that the pod didn't tolerate.",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-19T00:37:45Z",
            "lastTimestamp": "2020-03-19T00:37:45Z",
            "count": 1,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-5c98db65d4-8zb2q.15fd8d89904e3650",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-5c98db65d4-8zb2q.15fd8d89904e3650",
                "uid": "f2f24d2d-37e1-45e4-9eeb-e29aa8e7ab54",
                "resourceVersion": "343",
                "creationTimestamp": "2020-03-19T00:37:45Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-5c98db65d4-8zb2q",
                "uid": "612ca953-d59b-43f5-9023-d461a16a7a00",
                "apiVersion": "v1",
                "resourceVersion": "335"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/coredns-5c98db65d4-8zb2q to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-19T00:37:45Z",
            "lastTimestamp": "2020-03-19T00:37:45Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-5c98db65d4-8zb2q.15fd8d89bcb5a418",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-5c98db65d4-8zb2q.15fd8d89bcb5a418",
                "uid": "dd7a012d-6aa7-402f-9f7d-bced439b4217",
                "resourceVersion": "378",
                "creationTimestamp": "2020-03-19T00:37:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-5c98db65d4-8zb2q",
                "uid": "612ca953-d59b-43f5-9023-d461a16a7a00",
                "apiVersion": "v1",
                "resourceVersion": "341",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/coredns:1.3.1\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:46Z",
            "lastTimestamp": "2020-03-19T00:37:47Z",
            "count": 2,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-5c98db65d4-8zb2q.15fd8d89bff88d3d",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-5c98db65d4-8zb2q.15fd8d89bff88d3d",
                "uid": "16bd3d1e-d2ac-4ca4-8338-5b98a0666d24",
                "resourceVersion": "384",
                "creationTimestamp": "2020-03-19T00:37:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-5c98db65d4-8zb2q",
                "uid": "612ca953-d59b-43f5-9023-d461a16a7a00",
                "apiVersion": "v1",
                "resourceVersion": "341",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Created",
            "message": "Created container coredns",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:46Z",
            "lastTimestamp": "2020-03-19T00:37:47Z",
            "count": 2,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-5c98db65d4-8zb2q.15fd8d89c85b6e6b",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-5c98db65d4-8zb2q.15fd8d89c85b6e6b",
                "uid": "bb1c7fc9-58f4-40a3-adb7-0ccfeae3cb29",
                "resourceVersion": "390",
                "creationTimestamp": "2020-03-19T00:37:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-5c98db65d4-8zb2q",
                "uid": "612ca953-d59b-43f5-9023-d461a16a7a00",
                "apiVersion": "v1",
                "resourceVersion": "341",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Started",
            "message": "Started container coredns",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:46Z",
            "lastTimestamp": "2020-03-19T00:37:48Z",
            "count": 2,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-5c98db65d4-fmhtl.15fd8d89904ec587",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-5c98db65d4-fmhtl.15fd8d89904ec587",
                "uid": "7926b214-3193-405e-b93e-9aaacc133ff1",
                "resourceVersion": "344",
                "creationTimestamp": "2020-03-19T00:37:45Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-5c98db65d4-fmhtl",
                "uid": "1f49ace9-c945-466e-bb33-c4e482368b6e",
                "apiVersion": "v1",
                "resourceVersion": "333"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/coredns-5c98db65d4-fmhtl to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-19T00:37:45Z",
            "lastTimestamp": "2020-03-19T00:37:45Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-5c98db65d4-fmhtl.15fd8d89ba6dfd47",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-5c98db65d4-fmhtl.15fd8d89ba6dfd47",
                "uid": "f1ae6ff4-06a8-4b3e-88ed-33c4f1110e29",
                "resourceVersion": "381",
                "creationTimestamp": "2020-03-19T00:37:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-5c98db65d4-fmhtl",
                "uid": "1f49ace9-c945-466e-bb33-c4e482368b6e",
                "apiVersion": "v1",
                "resourceVersion": "340",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/coredns:1.3.1\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:46Z",
            "lastTimestamp": "2020-03-19T00:37:47Z",
            "count": 2,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-5c98db65d4-fmhtl.15fd8d89bbe8a907",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-5c98db65d4-fmhtl.15fd8d89bbe8a907",
                "uid": "34759431-b4a7-4e61-9aa3-061287f25e16",
                "resourceVersion": "383",
                "creationTimestamp": "2020-03-19T00:37:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-5c98db65d4-fmhtl",
                "uid": "1f49ace9-c945-466e-bb33-c4e482368b6e",
                "apiVersion": "v1",
                "resourceVersion": "340",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Created",
            "message": "Created container coredns",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:46Z",
            "lastTimestamp": "2020-03-19T00:37:47Z",
            "count": 2,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-5c98db65d4-fmhtl.15fd8d89c43a3257",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-5c98db65d4-fmhtl.15fd8d89c43a3257",
                "uid": "7a2cdfff-e8a5-4b36-8b11-20418addc4d8",
                "resourceVersion": "389",
                "creationTimestamp": "2020-03-19T00:37:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-5c98db65d4-fmhtl",
                "uid": "1f49ace9-c945-466e-bb33-c4e482368b6e",
                "apiVersion": "v1",
                "resourceVersion": "340",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Started",
            "message": "Started container coredns",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:46Z",
            "lastTimestamp": "2020-03-19T00:37:47Z",
            "count": 2,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-5c98db65d4.15fd8d898f1061aa",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-5c98db65d4.15fd8d898f1061aa",
                "uid": "0cdd55c6-5996-47c8-ad70-2b12f57f5eb0",
                "resourceVersion": "331",
                "creationTimestamp": "2020-03-19T00:37:45Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "coredns-5c98db65d4",
                "uid": "2eed46eb-cc19-4766-bf41-29878b3587cc",
                "apiVersion": "apps/v1",
                "resourceVersion": "310"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: coredns-5c98db65d4-8zb2q",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-19T00:37:45Z",
            "lastTimestamp": "2020-03-19T00:37:45Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-5c98db65d4.15fd8d898f8648c3",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-5c98db65d4.15fd8d898f8648c3",
                "uid": "c6c7872a-8970-46cb-88da-49921e447da4",
                "resourceVersion": "339",
                "creationTimestamp": "2020-03-19T00:37:45Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "coredns-5c98db65d4",
                "uid": "2eed46eb-cc19-4766-bf41-29878b3587cc",
                "apiVersion": "apps/v1",
                "resourceVersion": "310"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: coredns-5c98db65d4-fmhtl",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-19T00:37:45Z",
            "lastTimestamp": "2020-03-19T00:37:45Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns.15fd8d898c34a3e0",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns.15fd8d898c34a3e0",
                "uid": "adb1cf8c-fb96-42bd-86d3-d3e8bd4a587c",
                "resourceVersion": "312",
                "creationTimestamp": "2020-03-19T00:37:45Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "coredns",
                "uid": "230406d9-6779-4ede-9fda-a9b69de9a12a",
                "apiVersion": "apps/v1",
                "resourceVersion": "208"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set coredns-5c98db65d4 to 2",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-19T00:37:45Z",
            "lastTimestamp": "2020-03-19T00:37:45Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "etcd-minikube.15fd8d8623f41b91",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/etcd-minikube.15fd8d8623f41b91",
                "uid": "80dac866-90cf-428d-813b-4c107a99b8b0",
                "resourceVersion": "251",
                "creationTimestamp": "2020-03-19T00:37:41Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "etcd-minikube",
                "uid": "1e35814c9410f5cb3098da6f4aeb4524",
                "apiVersion": "v1",
                "fieldPath": "spec.containers{etcd}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/etcd:3.3.10\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:31Z",
            "lastTimestamp": "2020-03-19T00:37:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "etcd-minikube.15fd8d862620be29",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/etcd-minikube.15fd8d862620be29",
                "uid": "84f102ef-ca2a-4985-a238-f5db79f9052e",
                "resourceVersion": "262",
                "creationTimestamp": "2020-03-19T00:37:42Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "etcd-minikube",
                "uid": "1e35814c9410f5cb3098da6f4aeb4524",
                "apiVersion": "v1",
                "fieldPath": "spec.containers{etcd}"
            },
            "reason": "Created",
            "message": "Created container etcd",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:31Z",
            "lastTimestamp": "2020-03-19T00:37:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "etcd-minikube.15fd8d863188c146",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/etcd-minikube.15fd8d863188c146",
                "uid": "11aa231f-25e3-4c87-8bec-60632e47061e",
                "resourceVersion": "278",
                "creationTimestamp": "2020-03-19T00:37:43Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "etcd-minikube",
                "uid": "1e35814c9410f5cb3098da6f4aeb4524",
                "apiVersion": "v1",
                "fieldPath": "spec.containers{etcd}"
            },
            "reason": "Started",
            "message": "Started container etcd",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:31Z",
            "lastTimestamp": "2020-03-19T00:37:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-apiserver-minikube.15fd8d862507075c",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-apiserver-minikube.15fd8d862507075c",
                "uid": "85fc3acf-f5ae-4f9d-923b-24901c43ec34",
                "resourceVersion": "255",
                "creationTimestamp": "2020-03-19T00:37:41Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-apiserver-minikube",
                "uid": "f296a1726882781746017a825f88c68e",
                "apiVersion": "v1",
                "fieldPath": "spec.containers{kube-apiserver}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/kube-apiserver:v1.15.4\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:31Z",
            "lastTimestamp": "2020-03-19T00:37:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-apiserver-minikube.15fd8d86273b3d40",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-apiserver-minikube.15fd8d86273b3d40",
                "uid": "567bde6a-1e22-4236-a67f-f88562fe3259",
                "resourceVersion": "266",
                "creationTimestamp": "2020-03-19T00:37:42Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-apiserver-minikube",
                "uid": "f296a1726882781746017a825f88c68e",
                "apiVersion": "v1",
                "fieldPath": "spec.containers{kube-apiserver}"
            },
            "reason": "Created",
            "message": "Created container kube-apiserver",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:31Z",
            "lastTimestamp": "2020-03-19T00:37:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-apiserver-minikube.15fd8d86329b0c30",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-apiserver-minikube.15fd8d86329b0c30",
                "uid": "931588b6-5ae7-4b75-9bea-b66a5567741c",
                "resourceVersion": "279",
                "creationTimestamp": "2020-03-19T00:37:43Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-apiserver-minikube",
                "uid": "f296a1726882781746017a825f88c68e",
                "apiVersion": "v1",
                "fieldPath": "spec.containers{kube-apiserver}"
            },
            "reason": "Started",
            "message": "Started container kube-apiserver",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:31Z",
            "lastTimestamp": "2020-03-19T00:37:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-controller-manager-minikube.15fd8d86223eca40",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-controller-manager-minikube.15fd8d86223eca40",
                "uid": "25bd9022-c11d-43b5-91f6-820e5c5134ba",
                "resourceVersion": "247",
                "creationTimestamp": "2020-03-19T00:37:41Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-controller-manager-minikube",
                "uid": "163270f0a93a23aa832b9104cf368dd1",
                "apiVersion": "v1",
                "fieldPath": "spec.containers{kube-controller-manager}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/kube-controller-manager:v1.15.4\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:31Z",
            "lastTimestamp": "2020-03-19T00:37:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-controller-manager-minikube.15fd8d862773f050",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-controller-manager-minikube.15fd8d862773f050",
                "uid": "6c729c87-0988-4edb-815e-179d97f770bc",
                "resourceVersion": "270",
                "creationTimestamp": "2020-03-19T00:37:42Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-controller-manager-minikube",
                "uid": "163270f0a93a23aa832b9104cf368dd1",
                "apiVersion": "v1",
                "fieldPath": "spec.containers{kube-controller-manager}"
            },
            "reason": "Created",
            "message": "Created container kube-controller-manager",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:31Z",
            "lastTimestamp": "2020-03-19T00:37:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-controller-manager-minikube.15fd8d8632f8826f",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-controller-manager-minikube.15fd8d8632f8826f",
                "uid": "09d03288-ebde-42b5-8b1c-5e72cc6947ac",
                "resourceVersion": "280",
                "creationTimestamp": "2020-03-19T00:37:43Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-controller-manager-minikube",
                "uid": "163270f0a93a23aa832b9104cf368dd1",
                "apiVersion": "v1",
                "fieldPath": "spec.containers{kube-controller-manager}"
            },
            "reason": "Started",
            "message": "Started container kube-controller-manager",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:31Z",
            "lastTimestamp": "2020-03-19T00:37:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-controller-manager.15fd8d87be351f4f",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-controller-manager.15fd8d87be351f4f",
                "uid": "08d17ecb-bda6-44cc-942c-3bc1c6ce333f",
                "resourceVersion": "130",
                "creationTimestamp": "2020-03-19T00:37:38Z"
            },
            "involvedObject": {
                "kind": "Endpoints",
                "namespace": "kube-system",
                "name": "kube-controller-manager",
                "uid": "7caf072c-eca3-4675-9ef8-0e7275cfb9f5",
                "apiVersion": "v1",
                "resourceVersion": "128"
            },
            "reason": "LeaderElection",
            "message": "minikube_3a1d2611-0b51-4707-b890-19f162bbee51 became leader",
            "source": {
                "component": "kube-controller-manager"
            },
            "firstTimestamp": "2020-03-19T00:37:38Z",
            "lastTimestamp": "2020-03-19T00:37:38Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-xvjhl.15fd8d89a361e175",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy-xvjhl.15fd8d89a361e175",
                "uid": "0ede5881-d52b-4b62-a2a6-9bb529f9ed3f",
                "resourceVersion": "358",
                "creationTimestamp": "2020-03-19T00:37:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-xvjhl",
                "uid": "b795fbea-e70b-4727-b933-505478320707",
                "apiVersion": "v1",
                "resourceVersion": "354"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/kube-proxy-xvjhl to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-19T00:37:46Z",
            "lastTimestamp": "2020-03-19T00:37:46Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-xvjhl.15fd8d89f6773bdc",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy-xvjhl.15fd8d89f6773bdc",
                "uid": "344c449d-6cd3-451d-93fc-4a96e7e36cfc",
                "resourceVersion": "374",
                "creationTimestamp": "2020-03-19T00:37:47Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-xvjhl",
                "uid": "b795fbea-e70b-4727-b933-505478320707",
                "apiVersion": "v1",
                "resourceVersion": "357",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/kube-proxy:v1.15.4\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:47Z",
            "lastTimestamp": "2020-03-19T00:37:47Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-xvjhl.15fd8d89f83f2fd3",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy-xvjhl.15fd8d89f83f2fd3",
                "uid": "d59f488c-9d81-4565-8db4-2a63429e408e",
                "resourceVersion": "375",
                "creationTimestamp": "2020-03-19T00:37:47Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-xvjhl",
                "uid": "b795fbea-e70b-4727-b933-505478320707",
                "apiVersion": "v1",
                "resourceVersion": "357",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Created",
            "message": "Created container kube-proxy",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:47Z",
            "lastTimestamp": "2020-03-19T00:37:47Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-xvjhl.15fd8d89fcbc1fe1",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy-xvjhl.15fd8d89fcbc1fe1",
                "uid": "cf85fe9b-ab70-4ffd-805b-f01a958a3001",
                "resourceVersion": "376",
                "creationTimestamp": "2020-03-19T00:37:47Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-xvjhl",
                "uid": "b795fbea-e70b-4727-b933-505478320707",
                "apiVersion": "v1",
                "resourceVersion": "357",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Started",
            "message": "Started container kube-proxy",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:47Z",
            "lastTimestamp": "2020-03-19T00:37:47Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy.15fd8d89a2289121",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy.15fd8d89a2289121",
                "uid": "1d9d429e-af5b-4f59-b0c8-af325150d5a8",
                "resourceVersion": "355",
                "creationTimestamp": "2020-03-19T00:37:46Z"
            },
            "involvedObject": {
                "kind": "DaemonSet",
                "namespace": "kube-system",
                "name": "kube-proxy",
                "uid": "f861ee2d-6374-4fa1-8a20-c63c3d45f509",
                "apiVersion": "apps/v1",
                "resourceVersion": "221"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: kube-proxy-xvjhl",
            "source": {
                "component": "daemonset-controller"
            },
            "firstTimestamp": "2020-03-19T00:37:46Z",
            "lastTimestamp": "2020-03-19T00:37:46Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-scheduler-minikube.15fd8d8621858cbe",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-scheduler-minikube.15fd8d8621858cbe",
                "uid": "60ce7d2b-5452-45b9-a475-79f490d43bc4",
                "resourceVersion": "238",
                "creationTimestamp": "2020-03-19T00:37:41Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-scheduler-minikube",
                "uid": "005af131c75f8b2bb5add0110835dbda",
                "apiVersion": "v1",
                "fieldPath": "spec.containers{kube-scheduler}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/kube-scheduler:v1.15.4\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:31Z",
            "lastTimestamp": "2020-03-19T00:37:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-scheduler-minikube.15fd8d8625fd7da3",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-scheduler-minikube.15fd8d8625fd7da3",
                "uid": "15daa751-79f3-4bdc-bed4-ddd1b9611932",
                "resourceVersion": "260",
                "creationTimestamp": "2020-03-19T00:37:42Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-scheduler-minikube",
                "uid": "005af131c75f8b2bb5add0110835dbda",
                "apiVersion": "v1",
                "fieldPath": "spec.containers{kube-scheduler}"
            },
            "reason": "Created",
            "message": "Created container kube-scheduler",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:31Z",
            "lastTimestamp": "2020-03-19T00:37:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-scheduler-minikube.15fd8d8630387604",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-scheduler-minikube.15fd8d8630387604",
                "uid": "f6f23616-4f40-4651-8350-da4fdfdf9e9e",
                "resourceVersion": "274",
                "creationTimestamp": "2020-03-19T00:37:42Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-scheduler-minikube",
                "uid": "005af131c75f8b2bb5add0110835dbda",
                "apiVersion": "v1",
                "fieldPath": "spec.containers{kube-scheduler}"
            },
            "reason": "Started",
            "message": "Started container kube-scheduler",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:31Z",
            "lastTimestamp": "2020-03-19T00:37:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-scheduler.15fd8d87d5ac0146",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-scheduler.15fd8d87d5ac0146",
                "uid": "c83eda09-fbbb-41c5-b67c-f6d44626b59c",
                "resourceVersion": "141",
                "creationTimestamp": "2020-03-19T00:37:38Z"
            },
            "involvedObject": {
                "kind": "Endpoints",
                "namespace": "kube-system",
                "name": "kube-scheduler",
                "uid": "8670f557-1a43-4788-baf9-756c088dab46",
                "apiVersion": "v1",
                "resourceVersion": "140"
            },
            "reason": "LeaderElection",
            "message": "minikube_c502469a-40f1-4175-9170-99546871bd53 became leader",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-19T00:37:38Z",
            "lastTimestamp": "2020-03-19T00:37:38Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.15fd8d88897a31db",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.15fd8d88897a31db",
                "uid": "5776b0af-3bd7-40ff-97df-1686297d4982",
                "resourceVersion": "246",
                "creationTimestamp": "2020-03-19T00:37:41Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "842a1cac-68f5-42ad-918f-b0c7df5140b6",
                "apiVersion": "v1",
                "resourceVersion": "243"
            },
            "reason": "FailedScheduling",
            "message": "0/1 nodes are available: 1 node(s) had taints that the pod didn't tolerate.",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-19T00:37:41Z",
            "lastTimestamp": "2020-03-19T00:37:41Z",
            "count": 2,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.15fd8d89917cf347",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.15fd8d89917cf347",
                "uid": "20650389-710e-4d67-a81e-3d60d1685522",
                "resourceVersion": "347",
                "creationTimestamp": "2020-03-19T00:37:45Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "842a1cac-68f5-42ad-918f-b0c7df5140b6",
                "apiVersion": "v1",
                "resourceVersion": "245"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/storage-provisioner to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-19T00:37:45Z",
            "lastTimestamp": "2020-03-19T00:37:45Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.15fd8d89b18daed1",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.15fd8d89b18daed1",
                "uid": "a2a46a35-6185-425f-8c1b-0bc9ec42b02c",
                "resourceVersion": "382",
                "creationTimestamp": "2020-03-19T00:37:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "842a1cac-68f5-42ad-918f-b0c7df5140b6",
                "apiVersion": "v1",
                "resourceVersion": "342",
                "fieldPath": "spec.containers{storage-provisioner}"
            },
            "reason": "Pulled",
            "message": "Container image \"gcr.io/k8s-minikube/storage-provisioner:v1.8.1\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:46Z",
            "lastTimestamp": "2020-03-19T00:37:47Z",
            "count": 2,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.15fd8d89b35b3016",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.15fd8d89b35b3016",
                "uid": "7183d814-3bb2-43f6-b2f0-e5ed909f6868",
                "resourceVersion": "387",
                "creationTimestamp": "2020-03-19T00:37:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "842a1cac-68f5-42ad-918f-b0c7df5140b6",
                "apiVersion": "v1",
                "resourceVersion": "342",
                "fieldPath": "spec.containers{storage-provisioner}"
            },
            "reason": "Created",
            "message": "Created container storage-provisioner",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:46Z",
            "lastTimestamp": "2020-03-19T00:37:47Z",
            "count": 2,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.15fd8d89c07bcdb7",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.15fd8d89c07bcdb7",
                "uid": "a0b0fb95-66da-470e-9ffe-e619da6aa6b0",
                "resourceVersion": "394",
                "creationTimestamp": "2020-03-19T00:37:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "842a1cac-68f5-42ad-918f-b0c7df5140b6",
                "apiVersion": "v1",
                "resourceVersion": "342",
                "fieldPath": "spec.containers{storage-provisioner}"
            },
            "reason": "Started",
            "message": "Started container storage-provisioner",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:46Z",
            "lastTimestamp": "2020-03-19T00:37:48Z",
            "count": 2,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "tiller-deploy-7bf78cdbf7-tbfkj.15fd8db9e796452f",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/tiller-deploy-7bf78cdbf7-tbfkj.15fd8db9e796452f",
                "uid": "92e02786-a1de-4e3d-8248-1027fd4e3b74",
                "resourceVersion": "678",
                "creationTimestamp": "2020-03-19T00:41:13Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "tiller-deploy-7bf78cdbf7-tbfkj",
                "uid": "2b702a81-afd3-4017-bb27-7959aa39a037",
                "apiVersion": "v1",
                "resourceVersion": "668"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/tiller-deploy-7bf78cdbf7-tbfkj to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-19T00:41:13Z",
            "lastTimestamp": "2020-03-19T00:41:13Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "tiller-deploy-7bf78cdbf7-tbfkj.15fd8dba07e62092",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/tiller-deploy-7bf78cdbf7-tbfkj.15fd8dba07e62092",
                "uid": "3553b1b8-5074-4c5f-8084-a2645144e5c6",
                "resourceVersion": "682",
                "creationTimestamp": "2020-03-19T00:41:14Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "tiller-deploy-7bf78cdbf7-tbfkj",
                "uid": "2b702a81-afd3-4017-bb27-7959aa39a037",
                "apiVersion": "v1",
                "resourceVersion": "671",
                "fieldPath": "spec.containers{tiller}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"gcr.io/kubernetes-helm/tiller:v2.14.1\"",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:41:14Z",
            "lastTimestamp": "2020-03-19T00:41:14Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "tiller-deploy-7bf78cdbf7-tbfkj.15fd8dbe485ca117",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/tiller-deploy-7bf78cdbf7-tbfkj.15fd8dbe485ca117",
                "uid": "7f23b674-b9a6-434a-ad6a-420d7491812a",
                "resourceVersion": "705",
                "creationTimestamp": "2020-03-19T00:41:32Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "tiller-deploy-7bf78cdbf7-tbfkj",
                "uid": "2b702a81-afd3-4017-bb27-7959aa39a037",
                "apiVersion": "v1",
                "resourceVersion": "671",
                "fieldPath": "spec.containers{tiller}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"gcr.io/kubernetes-helm/tiller:v2.14.1\"",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:41:32Z",
            "lastTimestamp": "2020-03-19T00:41:32Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "tiller-deploy-7bf78cdbf7-tbfkj.15fd8dbe4fc16f13",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/tiller-deploy-7bf78cdbf7-tbfkj.15fd8dbe4fc16f13",
                "uid": "771298ad-3380-4cd2-8496-be42dcd49e95",
                "resourceVersion": "706",
                "creationTimestamp": "2020-03-19T00:41:32Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "tiller-deploy-7bf78cdbf7-tbfkj",
                "uid": "2b702a81-afd3-4017-bb27-7959aa39a037",
                "apiVersion": "v1",
                "resourceVersion": "671",
                "fieldPath": "spec.containers{tiller}"
            },
            "reason": "Created",
            "message": "Created container tiller",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:41:32Z",
            "lastTimestamp": "2020-03-19T00:41:32Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "tiller-deploy-7bf78cdbf7-tbfkj.15fd8dbe5639b571",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/tiller-deploy-7bf78cdbf7-tbfkj.15fd8dbe5639b571",
                "uid": "3a9075e3-effb-4c47-93d8-ef18a1ef5874",
                "resourceVersion": "708",
                "creationTimestamp": "2020-03-19T00:41:32Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "tiller-deploy-7bf78cdbf7-tbfkj",
                "uid": "2b702a81-afd3-4017-bb27-7959aa39a037",
                "apiVersion": "v1",
                "resourceVersion": "671",
                "fieldPath": "spec.containers{tiller}"
            },
            "reason": "Started",
            "message": "Started container tiller",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:41:32Z",
            "lastTimestamp": "2020-03-19T00:41:32Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "tiller-deploy-7bf78cdbf7.15fd8db9e7205c7b",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/tiller-deploy-7bf78cdbf7.15fd8db9e7205c7b",
                "uid": "24d05f05-bc1f-40e4-a54f-957cb21f0593",
                "resourceVersion": "673",
                "creationTimestamp": "2020-03-19T00:41:13Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "tiller-deploy-7bf78cdbf7",
                "uid": "1bd2f5bb-ce1b-4d0a-9e29-045d43633e6e",
                "apiVersion": "apps/v1",
                "resourceVersion": "666"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: tiller-deploy-7bf78cdbf7-tbfkj",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-19T00:41:13Z",
            "lastTimestamp": "2020-03-19T00:41:13Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "tiller-deploy.15fd8db9e6857884",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/tiller-deploy.15fd8db9e6857884",
                "uid": "cd58b015-300f-4df6-a869-a00261a49825",
                "resourceVersion": "672",
                "creationTimestamp": "2020-03-19T00:41:13Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "tiller-deploy",
                "uid": "3581a785-00d4-483f-89c0-1028f12890df",
                "apiVersion": "apps/v1",
                "resourceVersion": "665"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set tiller-deploy-7bf78cdbf7 to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-19T00:41:13Z",
            "lastTimestamp": "2020-03-19T00:41:13Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        }
    ]
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/replicationcontrollers",
        "resourceVersion": "1099"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/services",
        "resourceVersion": "1099"
    },
    "items": [
        {
            "metadata": {
                "name": "kube-dns",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/kube-dns",
                "uid": "cc5ec23c-a0a1-4a0c-800b-d2c640efc086",
                "resourceVersion": "210",
                "creationTimestamp": "2020-03-19T00:37:40Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "KubeDNS"
                },
                "annotations": {
                    "prometheus.io/port": "9153",
                    "prometheus.io/scrape": "true"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "dns",
                        "protocol": "UDP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "dns-tcp",
                        "protocol": "TCP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "metrics",
                        "protocol": "TCP",
                        "port": 9153,
                        "targetPort": 9153
                    }
                ],
                "selector": {
                    "k8s-app": "kube-dns"
                },
                "clusterIP": "10.96.0.10",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "metadata": {
                "name": "tiller-deploy",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/tiller-deploy",
                "uid": "5ce86bab-26e7-4904-9389-66a5e264e892",
                "resourceVersion": "674",
                "creationTimestamp": "2020-03-19T00:41:13Z",
                "labels": {
                    "app": "helm",
                    "name": "tiller"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "tiller",
                        "protocol": "TCP",
                        "port": 44134,
                        "targetPort": "tiller"
                    }
                ],
                "selector": {
                    "app": "helm",
                    "name": "tiller"
                },
                "clusterIP": "10.110.103.207",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/daemonsets",
        "resourceVersion": "1099"
    },
    "items": [
        {
            "metadata": {
                "name": "kube-proxy",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/daemonsets/kube-proxy",
                "uid": "f861ee2d-6374-4fa1-8a20-c63c3d45f509",
                "resourceVersion": "392",
                "generation": 1,
                "creationTimestamp": "2020-03-19T00:37:40Z",
                "labels": {
                    "k8s-app": "kube-proxy"
                },
                "annotations": {
                    "deprecated.daemonset.template.generation": "1"
                }
            },
            "spec": {
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-proxy"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-proxy"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "kube-proxy",
                                "configMap": {
                                    "name": "kube-proxy",
                                    "defaultMode": 420
                                }
                            },
                            {
                                "name": "xtables-lock",
                                "hostPath": {
                                    "path": "/run/xtables.lock",
                                    "type": "FileOrCreate"
                                }
                            },
                            {
                                "name": "lib-modules",
                                "hostPath": {
                                    "path": "/lib/modules",
                                    "type": ""
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "kube-proxy",
                                "image": "k8s.gcr.io/kube-proxy:v1.15.4",
                                "command": [
                                    "/usr/local/bin/kube-proxy",
                                    "--config=/var/lib/kube-proxy/config.conf",
                                    "--hostname-override=$(NODE_NAME)"
                                ],
                                "env": [
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "kube-proxy",
                                        "mountPath": "/var/lib/kube-proxy"
                                    },
                                    {
                                        "name": "xtables-lock",
                                        "mountPath": "/run/xtables.lock"
                                    },
                                    {
                                        "name": "lib-modules",
                                        "readOnly": true,
                                        "mountPath": "/lib/modules"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "privileged": true
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "nodeSelector": {
                            "beta.kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "kube-proxy",
                        "serviceAccount": "kube-proxy",
                        "hostNetwork": true,
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-node-critical"
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1
                    }
                },
                "revisionHistoryLimit": 10
            },
            "status": {
                "currentNumberScheduled": 1,
                "numberMisscheduled": 0,
                "desiredNumberScheduled": 1,
                "numberReady": 1,
                "observedGeneration": 1,
                "updatedNumberScheduled": 1,
                "numberAvailable": 1
            }
        }
    ]
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments",
        "resourceVersion": "1099"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/coredns",
                "uid": "230406d9-6779-4ede-9fda-a9b69de9a12a",
                "resourceVersion": "415",
                "generation": 1,
                "creationTimestamp": "2020-03-19T00:37:40Z",
                "labels": {
                    "k8s-app": "kube-dns"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1"
                }
            },
            "spec": {
                "replicas": 2,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "k8s.gcr.io/coredns:1.3.1",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "beta.kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1,
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 2,
                "updatedReplicas": 2,
                "readyReplicas": 2,
                "availableReplicas": 2,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-03-19T00:37:53Z",
                        "lastTransitionTime": "2020-03-19T00:37:53Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-03-19T00:37:56Z",
                        "lastTransitionTime": "2020-03-19T00:37:45Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"coredns-5c98db65d4\" has successfully progressed."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "tiller-deploy",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/tiller-deploy",
                "uid": "3581a785-00d4-483f-89c0-1028f12890df",
                "resourceVersion": "723",
                "generation": 1,
                "creationTimestamp": "2020-03-19T00:41:13Z",
                "labels": {
                    "app": "helm",
                    "name": "tiller"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "app": "helm",
                        "name": "tiller"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "helm",
                            "name": "tiller"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "tiller",
                                "image": "gcr.io/kubernetes-helm/tiller:v2.14.1",
                                "ports": [
                                    {
                                        "name": "tiller",
                                        "containerPort": 44134,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "http",
                                        "containerPort": 44135,
                                        "protocol": "TCP"
                                    }
                                ],
                                "env": [
                                    {
                                        "name": "TILLER_NAMESPACE",
                                        "value": "kube-system"
                                    },
                                    {
                                        "name": "TILLER_HISTORY_MAX",
                                        "value": "0"
                                    }
                                ],
                                "resources": {},
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/liveness",
                                        "port": 44135,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 1,
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/readiness",
                                        "port": 44135,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 1,
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "tiller",
                        "serviceAccount": "tiller",
                        "automountServiceAccountToken": true,
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1,
                        "maxSurge": 1
                    }
                },
                "revisionHistoryLimit": 2147483647,
                "progressDeadlineSeconds": 2147483647
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-03-19T00:41:13Z",
                        "lastTransitionTime": "2020-03-19T00:41:13Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    }
                ]
            }
        }
    ]
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets",
        "resourceVersion": "1099"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-5c98db65d4",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/coredns-5c98db65d4",
                "uid": "2eed46eb-cc19-4766-bf41-29878b3587cc",
                "resourceVersion": "413",
                "generation": 1,
                "creationTimestamp": "2020-03-19T00:37:45Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "5c98db65d4"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "2",
                    "deployment.kubernetes.io/max-replicas": "3",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "coredns",
                        "uid": "230406d9-6779-4ede-9fda-a9b69de9a12a",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 2,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns",
                        "pod-template-hash": "5c98db65d4"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns",
                            "pod-template-hash": "5c98db65d4"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "k8s.gcr.io/coredns:1.3.1",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "beta.kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 2,
                "fullyLabeledReplicas": 2,
                "readyReplicas": 2,
                "availableReplicas": 2,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "tiller-deploy-7bf78cdbf7",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/tiller-deploy-7bf78cdbf7",
                "uid": "1bd2f5bb-ce1b-4d0a-9e29-045d43633e6e",
                "resourceVersion": "721",
                "generation": 1,
                "creationTimestamp": "2020-03-19T00:41:13Z",
                "labels": {
                    "app": "helm",
                    "name": "tiller",
                    "pod-template-hash": "7bf78cdbf7"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "tiller-deploy",
                        "uid": "3581a785-00d4-483f-89c0-1028f12890df",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "app": "helm",
                        "name": "tiller",
                        "pod-template-hash": "7bf78cdbf7"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "helm",
                            "name": "tiller",
                            "pod-template-hash": "7bf78cdbf7"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "tiller",
                                "image": "gcr.io/kubernetes-helm/tiller:v2.14.1",
                                "ports": [
                                    {
                                        "name": "tiller",
                                        "containerPort": 44134,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "http",
                                        "containerPort": 44135,
                                        "protocol": "TCP"
                                    }
                                ],
                                "env": [
                                    {
                                        "name": "TILLER_NAMESPACE",
                                        "value": "kube-system"
                                    },
                                    {
                                        "name": "TILLER_HISTORY_MAX",
                                        "value": "0"
                                    }
                                ],
                                "resources": {},
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/liveness",
                                        "port": 44135,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 1,
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/readiness",
                                        "port": 44135,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 1,
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "tiller",
                        "serviceAccount": "tiller",
                        "automountServiceAccountToken": true,
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        }
    ]
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/pods",
        "resourceVersion": "1099"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-5c98db65d4-8zb2q",
                "generateName": "coredns-5c98db65d4-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/coredns-5c98db65d4-8zb2q",
                "uid": "612ca953-d59b-43f5-9023-d461a16a7a00",
                "resourceVersion": "404",
                "creationTimestamp": "2020-03-19T00:37:45Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "5c98db65d4"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "coredns-5c98db65d4",
                        "uid": "2eed46eb-cc19-4766-bf41-29878b3587cc",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "config-volume",
                        "configMap": {
                            "name": "coredns",
                            "items": [
                                {
                                    "key": "Corefile",
                                    "path": "Corefile"
                                }
                            ],
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "coredns-token-x95rp",
                        "secret": {
                            "secretName": "coredns-token-x95rp",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "coredns",
                        "image": "k8s.gcr.io/coredns:1.3.1",
                        "args": [
                            "-conf",
                            "/etc/coredns/Corefile"
                        ],
                        "ports": [
                            {
                                "name": "dns",
                                "containerPort": 53,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp",
                                "containerPort": 53,
                                "protocol": "TCP"
                            },
                            {
                                "name": "metrics",
                                "containerPort": 9153,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "memory": "170Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "70Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "config-volume",
                                "readOnly": true,
                                "mountPath": "/etc/coredns"
                            },
                            {
                                "name": "coredns-token-x95rp",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "capabilities": {
                                "add": [
                                    "NET_BIND_SERVICE"
                                ],
                                "drop": [
                                    "all"
                                ]
                            },
                            "readOnlyRootFilesystem": true,
                            "allowPrivilegeEscalation": false
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "nodeSelector": {
                    "beta.kubernetes.io/os": "linux"
                },
                "serviceAccountName": "coredns",
                "serviceAccount": "coredns",
                "nodeName": "minikube",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node-role.kubernetes.io/master",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:45Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:53Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:53Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:45Z"
                    }
                ],
                "hostIP": "192.168.99.119",
                "podIP": "172.17.0.2",
                "startTime": "2020-03-19T00:37:45Z",
                "containerStatuses": [
                    {
                        "name": "coredns",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-19T00:37:47Z"
                            }
                        },
                        "lastState": {
                            "terminated": {
                                "exitCode": 2,
                                "reason": "Error",
                                "startedAt": "2020-03-19T00:37:46Z",
                                "finishedAt": "2020-03-19T00:37:46Z",
                                "containerID": "docker://2c312d4015e916e8e8e2693856a47f544f890beaee9ca1c4a5c11b531d00b98b"
                            }
                        },
                        "ready": true,
                        "restartCount": 1,
                        "image": "k8s.gcr.io/coredns:1.3.1",
                        "imageID": "docker://sha256:eb516548c180f8a6e0235034ccee2428027896af16a509786da13022fe95fe8c",
                        "containerID": "docker://ade86aa8bed3679694c83c38ad90377fbb37b344ec8a4f388d0e91a0120d5522"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "coredns-5c98db65d4-fmhtl",
                "generateName": "coredns-5c98db65d4-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/coredns-5c98db65d4-fmhtl",
                "uid": "1f49ace9-c945-466e-bb33-c4e482368b6e",
                "resourceVersion": "412",
                "creationTimestamp": "2020-03-19T00:37:45Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "5c98db65d4"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "coredns-5c98db65d4",
                        "uid": "2eed46eb-cc19-4766-bf41-29878b3587cc",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "config-volume",
                        "configMap": {
                            "name": "coredns",
                            "items": [
                                {
                                    "key": "Corefile",
                                    "path": "Corefile"
                                }
                            ],
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "coredns-token-x95rp",
                        "secret": {
                            "secretName": "coredns-token-x95rp",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "coredns",
                        "image": "k8s.gcr.io/coredns:1.3.1",
                        "args": [
                            "-conf",
                            "/etc/coredns/Corefile"
                        ],
                        "ports": [
                            {
                                "name": "dns",
                                "containerPort": 53,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp",
                                "containerPort": 53,
                                "protocol": "TCP"
                            },
                            {
                                "name": "metrics",
                                "containerPort": 9153,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "memory": "170Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "70Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "config-volume",
                                "readOnly": true,
                                "mountPath": "/etc/coredns"
                            },
                            {
                                "name": "coredns-token-x95rp",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "capabilities": {
                                "add": [
                                    "NET_BIND_SERVICE"
                                ],
                                "drop": [
                                    "all"
                                ]
                            },
                            "readOnlyRootFilesystem": true,
                            "allowPrivilegeEscalation": false
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "nodeSelector": {
                    "beta.kubernetes.io/os": "linux"
                },
                "serviceAccountName": "coredns",
                "serviceAccount": "coredns",
                "nodeName": "minikube",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node-role.kubernetes.io/master",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:45Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:56Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:56Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:45Z"
                    }
                ],
                "hostIP": "192.168.99.119",
                "podIP": "172.17.0.3",
                "startTime": "2020-03-19T00:37:45Z",
                "containerStatuses": [
                    {
                        "name": "coredns",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-19T00:37:47Z"
                            }
                        },
                        "lastState": {
                            "terminated": {
                                "exitCode": 2,
                                "reason": "Error",
                                "startedAt": "2020-03-19T00:37:46Z",
                                "finishedAt": "2020-03-19T00:37:46Z",
                                "containerID": "docker://6c1fafe81da75c6ddec45a903197d8aa09df76f64976ed9221c9f5e07ff2165e"
                            }
                        },
                        "ready": true,
                        "restartCount": 1,
                        "image": "k8s.gcr.io/coredns:1.3.1",
                        "imageID": "docker://sha256:eb516548c180f8a6e0235034ccee2428027896af16a509786da13022fe95fe8c",
                        "containerID": "docker://62863d5211001f8d8e9c0ac9553d94be4d7f57b552177a88f86f80a302b59fca"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "etcd-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/etcd-minikube",
                "uid": "659b6f13-ec23-4e2b-a1ad-e860da10870f",
                "resourceVersion": "510",
                "creationTimestamp": "2020-03-19T00:39:04Z",
                "labels": {
                    "component": "etcd",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "1e35814c9410f5cb3098da6f4aeb4524",
                    "kubernetes.io/config.mirror": "1e35814c9410f5cb3098da6f4aeb4524",
                    "kubernetes.io/config.seen": "2020-03-19T00:37:27.081427429Z",
                    "kubernetes.io/config.source": "file"
                }
            },
            "spec": {
                "volumes": [
                    {
                        "name": "etcd-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs/etcd",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "etcd-data",
                        "hostPath": {
                            "path": "/var/lib/minikube/etcd",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "etcd",
                        "image": "k8s.gcr.io/etcd:3.3.10",
                        "command": [
                            "etcd",
                            "--advertise-client-urls=https://192.168.99.119:2379",
                            "--cert-file=/var/lib/minikube/certs/etcd/server.crt",
                            "--client-cert-auth=true",
                            "--data-dir=/var/lib/minikube/etcd",
                            "--initial-advertise-peer-urls=https://192.168.99.119:2380",
                            "--initial-cluster=minikube=https://192.168.99.119:2380",
                            "--key-file=/var/lib/minikube/certs/etcd/server.key",
                            "--listen-client-urls=https://127.0.0.1:2379,https://192.168.99.119:2379",
                            "--listen-metrics-urls=http://127.0.0.1:2381,http://192.168.99.119:2381",
                            "--listen-peer-urls=https://192.168.99.119:2380",
                            "--name=minikube",
                            "--peer-cert-file=/var/lib/minikube/certs/etcd/peer.crt",
                            "--peer-client-cert-auth=true",
                            "--peer-key-file=/var/lib/minikube/certs/etcd/peer.key",
                            "--peer-trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt",
                            "--snapshot-count=10000",
                            "--trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt"
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "etcd-data",
                                "mountPath": "/var/lib/minikube/etcd"
                            },
                            {
                                "name": "etcd-certs",
                                "mountPath": "/var/lib/minikube/certs/etcd"
                            }
                        ],
                        "livenessProbe": {
                            "exec": {
                                "command": [
                                    "/bin/sh",
                                    "-ec",
                                    "ETCDCTL_API=3 etcdctl --endpoints=https://[127.0.0.1]:2379 --cacert=/var/lib/minikube/certs/etcd/ca.crt --cert=/var/lib/minikube/certs/etcd/healthcheck-client.crt --key=/var/lib/minikube/certs/etcd/healthcheck-client.key get foo"
                                ]
                            },
                            "initialDelaySeconds": 15,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:30Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:32Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:32Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:30Z"
                    }
                ],
                "hostIP": "192.168.99.119",
                "podIP": "192.168.99.119",
                "startTime": "2020-03-19T00:37:30Z",
                "containerStatuses": [
                    {
                        "name": "etcd",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-19T00:37:31Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/etcd:3.3.10",
                        "imageID": "docker://sha256:2c4adeb21b4ff8ed3309d0e42b6b4ae39872399f7b37e0856e673b13c4aba13d",
                        "containerID": "docker://cbe94d04cccd17b4d5b3c002857486d6dd4921f3c1e1292720b3125a5164eb2b"
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "kube-apiserver-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-apiserver-minikube",
                "uid": "bac64b98-cc1a-4965-b428-0d11ab2a2bb4",
                "resourceVersion": "495",
                "creationTimestamp": "2020-03-19T00:38:51Z",
                "labels": {
                    "component": "kube-apiserver",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "f296a1726882781746017a825f88c68e",
                    "kubernetes.io/config.mirror": "f296a1726882781746017a825f88c68e",
                    "kubernetes.io/config.seen": "2020-03-19T00:37:27.081432665Z",
                    "kubernetes.io/config.source": "file"
                }
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ca-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "k8s-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "usr-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-apiserver",
                        "image": "k8s.gcr.io/kube-apiserver:v1.15.4",
                        "command": [
                            "kube-apiserver",
                            "--advertise-address=192.168.99.119",
                            "--allow-privileged=true",
                            "--authorization-mode=Node,RBAC",
                            "--client-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota",
                            "--enable-bootstrap-token-auth=true",
                            "--etcd-cafile=/var/lib/minikube/certs/etcd/ca.crt",
                            "--etcd-certfile=/var/lib/minikube/certs/apiserver-etcd-client.crt",
                            "--etcd-keyfile=/var/lib/minikube/certs/apiserver-etcd-client.key",
                            "--etcd-servers=https://127.0.0.1:2379",
                            "--insecure-port=0",
                            "--kubelet-client-certificate=/var/lib/minikube/certs/apiserver-kubelet-client.crt",
                            "--kubelet-client-key=/var/lib/minikube/certs/apiserver-kubelet-client.key",
                            "--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname",
                            "--proxy-client-cert-file=/var/lib/minikube/certs/front-proxy-client.crt",
                            "--proxy-client-key-file=/var/lib/minikube/certs/front-proxy-client.key",
                            "--requestheader-allowed-names=front-proxy-client",
                            "--requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt",
                            "--requestheader-extra-headers-prefix=X-Remote-Extra-",
                            "--requestheader-group-headers=X-Remote-Group",
                            "--requestheader-username-headers=X-Remote-User",
                            "--secure-port=8443",
                            "--service-account-key-file=/var/lib/minikube/certs/sa.pub",
                            "--service-cluster-ip-range=10.96.0.0/12",
                            "--tls-cert-file=/var/lib/minikube/certs/apiserver.crt",
                            "--tls-private-key-file=/var/lib/minikube/certs/apiserver.key"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "250m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "ca-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "k8s-certs",
                                "readOnly": true,
                                "mountPath": "/var/lib/minikube/certs"
                            },
                            {
                                "name": "usr-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 8443,
                                "host": "192.168.99.119",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 15,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:30Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:31Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:31Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:30Z"
                    }
                ],
                "hostIP": "192.168.99.119",
                "podIP": "192.168.99.119",
                "startTime": "2020-03-19T00:37:30Z",
                "containerStatuses": [
                    {
                        "name": "kube-apiserver",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-19T00:37:31Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-apiserver:v1.15.4",
                        "imageID": "docker://sha256:8d42b9dd0d2f3022d84814262757e5c09a30281578fb2ec8e7e5a50d8bbcea69",
                        "containerID": "docker://aee6e9a9259dfd6ac24f1a386087b6484af8d7617c9174468bc5ba5aeea11be0"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-controller-manager-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-controller-manager-minikube",
                "uid": "564c430f-6b99-4a81-ba21-68de42c525c3",
                "resourceVersion": "511",
                "creationTimestamp": "2020-03-19T00:39:00Z",
                "labels": {
                    "component": "kube-controller-manager",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "163270f0a93a23aa832b9104cf368dd1",
                    "kubernetes.io/config.mirror": "163270f0a93a23aa832b9104cf368dd1",
                    "kubernetes.io/config.seen": "2020-03-19T00:37:27.081433738Z",
                    "kubernetes.io/config.source": "file"
                }
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ca-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "k8s-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/etc/kubernetes/controller-manager.conf",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "usr-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-controller-manager",
                        "image": "k8s.gcr.io/kube-controller-manager:v1.15.4",
                        "command": [
                            "kube-controller-manager",
                            "--authentication-kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--authorization-kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--bind-address=127.0.0.1",
                            "--client-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--cluster-signing-cert-file=/var/lib/minikube/certs/ca.crt",
                            "--cluster-signing-key-file=/var/lib/minikube/certs/ca.key",
                            "--controllers=*,bootstrapsigner,tokencleaner",
                            "--kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--leader-elect=true",
                            "--requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt",
                            "--root-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--service-account-private-key-file=/var/lib/minikube/certs/sa.key",
                            "--use-service-account-credentials=true"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "200m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "ca-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "k8s-certs",
                                "readOnly": true,
                                "mountPath": "/var/lib/minikube/certs"
                            },
                            {
                                "name": "kubeconfig",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/controller-manager.conf"
                            },
                            {
                                "name": "usr-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10252,
                                "host": "127.0.0.1",
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 15,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:30Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:32Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:32Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:30Z"
                    }
                ],
                "hostIP": "192.168.99.119",
                "podIP": "192.168.99.119",
                "startTime": "2020-03-19T00:37:30Z",
                "containerStatuses": [
                    {
                        "name": "kube-controller-manager",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-19T00:37:31Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-controller-manager:v1.15.4",
                        "imageID": "docker://sha256:6bd2df93e08c8618a6f7c5506692f6e019eac25cabded0f0e112d4e05393397c",
                        "containerID": "docker://1407f41e0584320d2a557943d7ea99fc10954bb848df451baf38991aaf382091"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-proxy-xvjhl",
                "generateName": "kube-proxy-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-proxy-xvjhl",
                "uid": "b795fbea-e70b-4727-b933-505478320707",
                "resourceVersion": "391",
                "creationTimestamp": "2020-03-19T00:37:46Z",
                "labels": {
                    "controller-revision-hash": "5b5755ccd4",
                    "k8s-app": "kube-proxy",
                    "pod-template-generation": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "DaemonSet",
                        "name": "kube-proxy",
                        "uid": "f861ee2d-6374-4fa1-8a20-c63c3d45f509",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kube-proxy",
                        "configMap": {
                            "name": "kube-proxy",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "xtables-lock",
                        "hostPath": {
                            "path": "/run/xtables.lock",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "lib-modules",
                        "hostPath": {
                            "path": "/lib/modules",
                            "type": ""
                        }
                    },
                    {
                        "name": "kube-proxy-token-vmdhz",
                        "secret": {
                            "secretName": "kube-proxy-token-vmdhz",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-proxy",
                        "image": "k8s.gcr.io/kube-proxy:v1.15.4",
                        "command": [
                            "/usr/local/bin/kube-proxy",
                            "--config=/var/lib/kube-proxy/config.conf",
                            "--hostname-override=$(NODE_NAME)"
                        ],
                        "env": [
                            {
                                "name": "NODE_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "spec.nodeName"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "kube-proxy",
                                "mountPath": "/var/lib/kube-proxy"
                            },
                            {
                                "name": "xtables-lock",
                                "mountPath": "/run/xtables.lock"
                            },
                            {
                                "name": "lib-modules",
                                "readOnly": true,
                                "mountPath": "/lib/modules"
                            },
                            {
                                "name": "kube-proxy-token-vmdhz",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "privileged": true
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeSelector": {
                    "beta.kubernetes.io/os": "linux"
                },
                "serviceAccountName": "kube-proxy",
                "serviceAccount": "kube-proxy",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "affinity": {
                    "nodeAffinity": {
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                            "nodeSelectorTerms": [
                                {
                                    "matchFields": [
                                        {
                                            "key": "metadata.name",
                                            "operator": "In",
                                            "values": [
                                                "minikube"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/disk-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/memory-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/pid-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/unschedulable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/network-unavailable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:46Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:47Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:47Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:46Z"
                    }
                ],
                "hostIP": "192.168.99.119",
                "podIP": "192.168.99.119",
                "startTime": "2020-03-19T00:37:46Z",
                "containerStatuses": [
                    {
                        "name": "kube-proxy",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-19T00:37:47Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-proxy:v1.15.4",
                        "imageID": "docker://sha256:171a8a0f4d0b397f5b77d1a2c742492f4955df15c613c5ccbfcef1d0dee00e4c",
                        "containerID": "docker://02fa14d3e20cb3304409db7613f2ea8b761a4c2ab1926e696ae5e9e37f994d16"
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "kube-scheduler-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-scheduler-minikube",
                "uid": "be5f5428-b716-48a4-9bb3-098fa1e55ee3",
                "resourceVersion": "512",
                "creationTimestamp": "2020-03-19T00:39:01Z",
                "labels": {
                    "component": "kube-scheduler",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "005af131c75f8b2bb5add0110835dbda",
                    "kubernetes.io/config.mirror": "005af131c75f8b2bb5add0110835dbda",
                    "kubernetes.io/config.seen": "2020-03-19T00:37:27.081434573Z",
                    "kubernetes.io/config.source": "file"
                }
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/etc/kubernetes/scheduler.conf",
                            "type": "FileOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-scheduler",
                        "image": "k8s.gcr.io/kube-scheduler:v1.15.4",
                        "command": [
                            "kube-scheduler",
                            "--bind-address=127.0.0.1",
                            "--kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--leader-elect=true"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "100m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kubeconfig",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/scheduler.conf"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10251,
                                "host": "127.0.0.1",
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 15,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:30Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:31Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:31Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:30Z"
                    }
                ],
                "hostIP": "192.168.99.119",
                "podIP": "192.168.99.119",
                "startTime": "2020-03-19T00:37:30Z",
                "containerStatuses": [
                    {
                        "name": "kube-scheduler",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-19T00:37:31Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-scheduler:v1.15.4",
                        "imageID": "docker://sha256:40eada7a21a8e70b9a288e8b84bce4dc7c70b70de6a9600edff1c2f17f02ec58",
                        "containerID": "docker://9b293d37a8ec9811d2f5a4304a03fee24693b7b9f5530804cd2cf5972dc54d5a"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "storage-provisioner",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/storage-provisioner",
                "uid": "842a1cac-68f5-42ad-918f-b0c7df5140b6",
                "resourceVersion": "398",
                "creationTimestamp": "2020-03-19T00:37:41Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "integration-test": "storage-provisioner"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"integration-test\":\"storage-provisioner\"},\"name\":\"storage-provisioner\",\"namespace\":\"kube-system\"},\"spec\":{\"containers\":[{\"command\":[\"/storage-provisioner\"],\"image\":\"gcr.io/k8s-minikube/storage-provisioner:v1.8.1\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"storage-provisioner\",\"volumeMounts\":[{\"mountPath\":\"/tmp\",\"name\":\"tmp\"}]}],\"hostNetwork\":true,\"serviceAccountName\":\"storage-provisioner\",\"volumes\":[{\"hostPath\":{\"path\":\"/tmp\",\"type\":\"Directory\"},\"name\":\"tmp\"}]}}\n"
                }
            },
            "spec": {
                "volumes": [
                    {
                        "name": "tmp",
                        "hostPath": {
                            "path": "/tmp",
                            "type": "Directory"
                        }
                    },
                    {
                        "name": "storage-provisioner-token-f6zng",
                        "secret": {
                            "secretName": "storage-provisioner-token-f6zng",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "storage-provisioner",
                        "image": "gcr.io/k8s-minikube/storage-provisioner:v1.8.1",
                        "command": [
                            "/storage-provisioner"
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "tmp",
                                "mountPath": "/tmp"
                            },
                            {
                                "name": "storage-provisioner-token-f6zng",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "storage-provisioner",
                "serviceAccount": "storage-provisioner",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:45Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:48Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:48Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:37:45Z"
                    }
                ],
                "hostIP": "192.168.99.119",
                "podIP": "192.168.99.119",
                "startTime": "2020-03-19T00:37:45Z",
                "containerStatuses": [
                    {
                        "name": "storage-provisioner",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-19T00:37:48Z"
                            }
                        },
                        "lastState": {
                            "terminated": {
                                "exitCode": 1,
                                "reason": "Error",
                                "startedAt": "2020-03-19T00:37:46Z",
                                "finishedAt": "2020-03-19T00:37:46Z",
                                "containerID": "docker://db14e3860edb1f9b6e453bc56593d4d3a68474dcc72562c28b197601f442f9cf"
                            }
                        },
                        "ready": true,
                        "restartCount": 1,
                        "image": "gcr.io/k8s-minikube/storage-provisioner:v1.8.1",
                        "imageID": "docker://sha256:4689081edb103a9e8174bf23a255bfbe0b2d9ed82edc907abab6989d1c60f02c",
                        "containerID": "docker://cc8fe95355c7e4d002ad57ba18f689a8e79e4fa78bdbb0454fc47ae30faf8dff"
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "tiller-deploy-7bf78cdbf7-tbfkj",
                "generateName": "tiller-deploy-7bf78cdbf7-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/tiller-deploy-7bf78cdbf7-tbfkj",
                "uid": "2b702a81-afd3-4017-bb27-7959aa39a037",
                "resourceVersion": "720",
                "creationTimestamp": "2020-03-19T00:41:13Z",
                "labels": {
                    "app": "helm",
                    "name": "tiller",
                    "pod-template-hash": "7bf78cdbf7"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "tiller-deploy-7bf78cdbf7",
                        "uid": "1bd2f5bb-ce1b-4d0a-9e29-045d43633e6e",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "tiller-token-mb6kw",
                        "secret": {
                            "secretName": "tiller-token-mb6kw",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "tiller",
                        "image": "gcr.io/kubernetes-helm/tiller:v2.14.1",
                        "ports": [
                            {
                                "name": "tiller",
                                "containerPort": 44134,
                                "protocol": "TCP"
                            },
                            {
                                "name": "http",
                                "containerPort": 44135,
                                "protocol": "TCP"
                            }
                        ],
                        "env": [
                            {
                                "name": "TILLER_NAMESPACE",
                                "value": "kube-system"
                            },
                            {
                                "name": "TILLER_HISTORY_MAX",
                                "value": "0"
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "tiller-token-mb6kw",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/liveness",
                                "port": 44135,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 1,
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/readiness",
                                "port": 44135,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 1,
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "tiller",
                "serviceAccount": "tiller",
                "automountServiceAccountToken": true,
                "nodeName": "minikube",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:41:13Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:41:39Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:41:39Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:41:13Z"
                    }
                ],
                "hostIP": "192.168.99.119",
                "podIP": "172.17.0.4",
                "startTime": "2020-03-19T00:41:13Z",
                "containerStatuses": [
                    {
                        "name": "tiller",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-19T00:41:32Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/kubernetes-helm/tiller:v2.14.1",
                        "imageID": "docker-pullable://gcr.io/kubernetes-helm/tiller@sha256:f8002b91997fdc2c15a9c2aa994bea117b5b1683933f3144369862f0883c3c42",
                        "containerID": "docker://7e5d3a11f82a7296db4bafc57bbe4f05d483c41b392ae1808078d00079a01d07"
                    }
                ],
                "qosClass": "BestEffort"
            }
        }
    ]
}
==== START logs for container coredns of pod kube-system/coredns-5c98db65d4-8zb2q ====
.:53
2020-03-19T00:37:48.115Z [INFO] CoreDNS-1.3.1
2020-03-19T00:37:48.115Z [INFO] linux/amd64, go1.11.4, 6b56a9c
CoreDNS-1.3.1
linux/amd64, go1.11.4, 6b56a9c
2020-03-19T00:37:48.116Z [INFO] plugin/reload: Running configuration MD5 = 5d5369fbc12f985709b924e721217843
==== END logs for container coredns of pod kube-system/coredns-5c98db65d4-8zb2q ====
==== START logs for container coredns of pod kube-system/coredns-5c98db65d4-fmhtl ====
.:53
2020-03-19T00:37:48.085Z [INFO] CoreDNS-1.3.1
2020-03-19T00:37:48.085Z [INFO] linux/amd64, go1.11.4, 6b56a9c
CoreDNS-1.3.1
linux/amd64, go1.11.4, 6b56a9c
2020-03-19T00:37:48.085Z [INFO] plugin/reload: Running configuration MD5 = 5d5369fbc12f985709b924e721217843
==== END logs for container coredns of pod kube-system/coredns-5c98db65d4-fmhtl ====
==== START logs for container etcd of pod kube-system/etcd-minikube ====
2020-03-19 00:37:31.620598 I | etcdmain: etcd Version: 3.3.10
2020-03-19 00:37:31.620670 I | etcdmain: Git SHA: 27fc7e2
2020-03-19 00:37:31.620674 I | etcdmain: Go Version: go1.10.4
2020-03-19 00:37:31.620677 I | etcdmain: Go OS/Arch: linux/amd64
2020-03-19 00:37:31.620681 I | etcdmain: setting maximum number of CPUs to 2, total number of available CPUs is 2
2020-03-19 00:37:31.665928 I | embed: peerTLS: cert = /var/lib/minikube/certs/etcd/peer.crt, key = /var/lib/minikube/certs/etcd/peer.key, ca = , trusted-ca = /var/lib/minikube/certs/etcd/ca.crt, client-cert-auth = true, crl-file = 
2020-03-19 00:37:31.681570 I | embed: listening for peers on https://192.168.99.119:2380
2020-03-19 00:37:31.825831 I | embed: listening for client requests on 127.0.0.1:2379
2020-03-19 00:37:31.825905 I | embed: listening for client requests on 192.168.99.119:2379
2020-03-19 00:37:31.854622 I | etcdserver: name = minikube
2020-03-19 00:37:31.873070 I | etcdserver: data dir = /var/lib/minikube/etcd
2020-03-19 00:37:31.876847 I | etcdserver: member dir = /var/lib/minikube/etcd/member
2020-03-19 00:37:31.876914 I | etcdserver: heartbeat = 100ms
2020-03-19 00:37:31.876968 I | etcdserver: election = 1000ms
2020-03-19 00:37:31.877019 I | etcdserver: snapshot count = 10000
2020-03-19 00:37:31.880019 I | etcdserver: advertise client URLs = https://192.168.99.119:2379
2020-03-19 00:37:31.880110 I | etcdserver: initial advertise peer URLs = https://192.168.99.119:2380
2020-03-19 00:37:31.880179 I | etcdserver: initial cluster = minikube=https://192.168.99.119:2380
2020-03-19 00:37:31.935768 I | etcdserver: starting member e508411e07868d5 in cluster 5c3cbaf6165ba050
2020-03-19 00:37:31.953510 I | raft: e508411e07868d5 became follower at term 0
2020-03-19 00:37:31.953544 I | raft: newRaft e508411e07868d5 [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0]
2020-03-19 00:37:31.953548 I | raft: e508411e07868d5 became follower at term 1
2020-03-19 00:37:32.161270 W | auth: simple token is not cryptographically signed
2020-03-19 00:37:32.330558 I | etcdserver: starting server... [version: 3.3.10, cluster version: to_be_decided]
2020-03-19 00:37:32.332320 I | embed: ClientTLS: cert = /var/lib/minikube/certs/etcd/server.crt, key = /var/lib/minikube/certs/etcd/server.key, ca = , trusted-ca = /var/lib/minikube/certs/etcd/ca.crt, client-cert-auth = true, crl-file = 
2020-03-19 00:37:32.332549 I | embed: listening for metrics on http://192.168.99.119:2381
2020-03-19 00:37:32.332782 I | embed: listening for metrics on http://127.0.0.1:2381
2020-03-19 00:37:32.332826 I | etcdserver: e508411e07868d5 as single-node; fast-forwarding 9 ticks (election ticks 10)
2020-03-19 00:37:32.333258 I | etcdserver/membership: added member e508411e07868d5 [https://192.168.99.119:2380] to cluster 5c3cbaf6165ba050
2020-03-19 00:37:32.859828 I | raft: e508411e07868d5 is starting a new election at term 1
2020-03-19 00:37:32.859936 I | raft: e508411e07868d5 became candidate at term 2
2020-03-19 00:37:32.860132 I | raft: e508411e07868d5 received MsgVoteResp from e508411e07868d5 at term 2
2020-03-19 00:37:32.860169 I | raft: e508411e07868d5 became leader at term 2
2020-03-19 00:37:32.860577 I | raft: raft.node: e508411e07868d5 elected leader e508411e07868d5 at term 2
2020-03-19 00:37:32.861594 I | etcdserver: published {Name:minikube ClientURLs:[https://192.168.99.119:2379]} to cluster 5c3cbaf6165ba050
2020-03-19 00:37:32.862192 I | embed: ready to serve client requests
2020-03-19 00:37:32.868007 I | embed: serving client requests on 192.168.99.119:2379
2020-03-19 00:37:32.868738 I | etcdserver: setting up the initial cluster version to 3.3
2020-03-19 00:37:32.870161 N | etcdserver/membership: set the initial cluster version to 3.3
2020-03-19 00:37:32.871996 I | etcdserver/api: enabled capabilities for version 3.3
2020-03-19 00:37:32.872167 I | embed: ready to serve client requests
2020-03-19 00:37:32.876626 I | embed: serving client requests on 127.0.0.1:2379
proto: no coders for int
proto: no encoder for ValueSize int [GetProperties]
==== END logs for container etcd of pod kube-system/etcd-minikube ====
==== START logs for container kube-apiserver of pod kube-system/kube-apiserver-minikube ====
Flag --insecure-port has been deprecated, This flag will be removed in a future version.
I0319 00:37:31.474675       1 server.go:560] external host was not specified, using 192.168.99.119
I0319 00:37:31.474817       1 server.go:147] Version: v1.15.4
I0319 00:37:32.093971       1 plugins.go:158] Loaded 10 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,MutatingAdmissionWebhook.
I0319 00:37:32.094150       1 plugins.go:161] Loaded 6 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,ValidatingAdmissionWebhook,ResourceQuota.
E0319 00:37:32.094682       1 prometheus.go:55] failed to register depth metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:32.095311       1 prometheus.go:68] failed to register adds metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:32.095381       1 prometheus.go:82] failed to register latency metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:32.095456       1 prometheus.go:96] failed to register workDuration metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:32.095515       1 prometheus.go:112] failed to register unfinished metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:32.095917       1 prometheus.go:126] failed to register unfinished metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:32.095975       1 prometheus.go:152] failed to register depth metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:32.095985       1 prometheus.go:164] failed to register adds metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:32.096153       1 prometheus.go:176] failed to register latency metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:32.096267       1 prometheus.go:188] failed to register work_duration metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:32.096398       1 prometheus.go:203] failed to register unfinished_work_seconds metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:32.096480       1 prometheus.go:216] failed to register longest_running_processor_microseconds metric admission_quota_controller: duplicate metrics collector registration attempted
I0319 00:37:32.096551       1 plugins.go:158] Loaded 10 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,MutatingAdmissionWebhook.
I0319 00:37:32.096600       1 plugins.go:161] Loaded 6 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,ValidatingAdmissionWebhook,ResourceQuota.
I0319 00:37:32.098561       1 client.go:354] parsed scheme: ""
I0319 00:37:32.099534       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:32.099730       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:32.099984       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.904845       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.905159       1 client.go:354] parsed scheme: ""
I0319 00:37:32.905330       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:32.905471       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:32.905599       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.914335       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.931353       1 master.go:233] Using reconciler: lease
I0319 00:37:32.932091       1 client.go:354] parsed scheme: ""
I0319 00:37:32.932153       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:32.932226       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:32.932413       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.938641       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.939952       1 client.go:354] parsed scheme: ""
I0319 00:37:32.940086       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:32.940157       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:32.940240       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.946311       1 client.go:354] parsed scheme: ""
I0319 00:37:32.946328       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:32.946344       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:32.946413       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.946580       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.953048       1 client.go:354] parsed scheme: ""
I0319 00:37:32.953065       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:32.953086       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:32.953137       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.953286       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.959093       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.959593       1 client.go:354] parsed scheme: ""
I0319 00:37:32.959613       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:32.959632       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:32.959746       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.966660       1 client.go:354] parsed scheme: ""
I0319 00:37:32.966755       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:32.966837       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:32.966896       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.967095       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.974342       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.974733       1 client.go:354] parsed scheme: ""
I0319 00:37:32.974834       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:32.974907       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:32.974989       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.981260       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.981689       1 client.go:354] parsed scheme: ""
I0319 00:37:32.981710       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:32.981739       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:32.981942       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.990292       1 client.go:354] parsed scheme: ""
I0319 00:37:32.990402       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:32.991232       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:32.990908       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:32.991476       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.000808       1 client.go:354] parsed scheme: ""
I0319 00:37:33.000946       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.001044       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.001123       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.001340       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.008672       1 client.go:354] parsed scheme: ""
I0319 00:37:33.008689       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.008708       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.008812       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.008938       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.015702       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.016305       1 client.go:354] parsed scheme: ""
I0319 00:37:33.016345       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.016400       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.016507       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.022905       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.023513       1 client.go:354] parsed scheme: ""
I0319 00:37:33.023527       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.023555       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.023594       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.029515       1 client.go:354] parsed scheme: ""
I0319 00:37:33.029549       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.029565       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.029590       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.029788       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.037062       1 client.go:354] parsed scheme: ""
I0319 00:37:33.037094       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.037118       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.037162       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.037404       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.044085       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.044689       1 client.go:354] parsed scheme: ""
I0319 00:37:33.044705       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.044721       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.044768       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.051732       1 client.go:354] parsed scheme: ""
I0319 00:37:33.051751       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.051776       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.051931       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.052007       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.058142       1 client.go:354] parsed scheme: ""
I0319 00:37:33.058214       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.058287       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.058364       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.058369       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.063957       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.094202       1 client.go:354] parsed scheme: ""
I0319 00:37:33.094301       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.094352       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.094420       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.101244       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.130322       1 client.go:354] parsed scheme: ""
I0319 00:37:33.130414       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.130461       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.130572       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.137230       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.137869       1 client.go:354] parsed scheme: ""
I0319 00:37:33.137906       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.137933       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.138075       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.143980       1 client.go:354] parsed scheme: ""
I0319 00:37:33.144038       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.144099       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.144191       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.144326       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.151513       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.152066       1 client.go:354] parsed scheme: ""
I0319 00:37:33.152098       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.152195       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.152283       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.158891       1 client.go:354] parsed scheme: ""
I0319 00:37:33.158940       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.158969       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.159079       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.159255       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.165638       1 client.go:354] parsed scheme: ""
I0319 00:37:33.165704       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.165740       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.165824       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.166001       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.172489       1 client.go:354] parsed scheme: ""
I0319 00:37:33.172545       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.172575       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.172650       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.172844       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.178918       1 client.go:354] parsed scheme: ""
I0319 00:37:33.178959       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.178987       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.179072       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.179388       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.189251       1 client.go:354] parsed scheme: ""
I0319 00:37:33.189369       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.189453       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.189559       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.189761       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.196007       1 client.go:354] parsed scheme: ""
I0319 00:37:33.196056       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.196081       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.196162       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.196305       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.202481       1 client.go:354] parsed scheme: ""
I0319 00:37:33.202843       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.202879       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.202620       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.202999       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.209018       1 client.go:354] parsed scheme: ""
I0319 00:37:33.209201       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.209270       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.209376       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.209551       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.215650       1 client.go:354] parsed scheme: ""
I0319 00:37:33.215716       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.215749       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.215819       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.216003       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.222273       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.222608       1 client.go:354] parsed scheme: ""
I0319 00:37:33.222672       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.222702       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.222825       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.228810       1 client.go:354] parsed scheme: ""
I0319 00:37:33.228854       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.228879       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.228962       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.229117       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.235420       1 client.go:354] parsed scheme: ""
I0319 00:37:33.235487       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.235521       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.235613       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.235970       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.241916       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.242315       1 client.go:354] parsed scheme: ""
I0319 00:37:33.242350       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.242376       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.242509       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.248810       1 client.go:354] parsed scheme: ""
I0319 00:37:33.248870       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.248932       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.249013       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.249281       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.255554       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.256014       1 client.go:354] parsed scheme: ""
I0319 00:37:33.256308       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.256355       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.256466       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.263097       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.263545       1 client.go:354] parsed scheme: ""
I0319 00:37:33.263558       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.263646       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.263715       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.270938       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.271259       1 client.go:354] parsed scheme: ""
I0319 00:37:33.271275       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.271342       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.271451       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.278172       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.278554       1 client.go:354] parsed scheme: ""
I0319 00:37:33.278589       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.278614       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.278750       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.285115       1 client.go:354] parsed scheme: ""
I0319 00:37:33.285177       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.285208       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.285288       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.285460       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.291872       1 client.go:354] parsed scheme: ""
I0319 00:37:33.291913       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.291939       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.292030       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.292198       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.299144       1 client.go:354] parsed scheme: ""
I0319 00:37:33.299246       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.299985       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.300900       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.301269       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.313131       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.313479       1 client.go:354] parsed scheme: ""
I0319 00:37:33.313492       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.313586       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.313664       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.334954       1 client.go:354] parsed scheme: ""
I0319 00:37:33.335614       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.335720       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.335116       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.335864       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.345148       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.345560       1 client.go:354] parsed scheme: ""
I0319 00:37:33.345598       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.345699       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.345821       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.353860       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.355714       1 client.go:354] parsed scheme: ""
I0319 00:37:33.355728       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.355848       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.355949       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.361968       1 client.go:354] parsed scheme: ""
I0319 00:37:33.361986       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.362017       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.362082       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.362178       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.368786       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.369149       1 client.go:354] parsed scheme: ""
I0319 00:37:33.369181       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.369222       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.369318       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.375951       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.376392       1 client.go:354] parsed scheme: ""
I0319 00:37:33.376428       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.376454       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.376592       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.383167       1 client.go:354] parsed scheme: ""
I0319 00:37:33.383232       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.383269       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.383406       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.383599       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.390001       1 client.go:354] parsed scheme: ""
I0319 00:37:33.390057       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.390088       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.390164       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.390307       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.396733       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.397157       1 client.go:354] parsed scheme: ""
I0319 00:37:33.397163       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.397254       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.397338       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.403595       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.404101       1 client.go:354] parsed scheme: ""
I0319 00:37:33.404128       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.404228       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.404337       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.410399       1 client.go:354] parsed scheme: ""
I0319 00:37:33.410416       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.410528       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.410568       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.410797       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.417440       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.418166       1 client.go:354] parsed scheme: ""
I0319 00:37:33.418194       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.418350       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.418471       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.436760       1 client.go:354] parsed scheme: ""
I0319 00:37:33.436825       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.436858       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.436945       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.437154       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.443587       1 client.go:354] parsed scheme: ""
I0319 00:37:33.443636       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.443664       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.443716       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.443837       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.451720       1 client.go:354] parsed scheme: ""
I0319 00:37:33.451798       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.451860       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.451908       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.452235       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.459004       1 client.go:354] parsed scheme: ""
I0319 00:37:33.459065       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.459094       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.459153       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.459293       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.465605       1 client.go:354] parsed scheme: ""
I0319 00:37:33.465688       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.465745       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.465839       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.466009       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.473230       1 client.go:354] parsed scheme: ""
I0319 00:37:33.473251       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.473402       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.473518       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.473747       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.486526       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.486855       1 client.go:354] parsed scheme: ""
I0319 00:37:33.486861       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.486882       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.486949       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.493488       1 client.go:354] parsed scheme: ""
I0319 00:37:33.493498       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.493523       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.493564       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.493696       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.501924       1 client.go:354] parsed scheme: ""
I0319 00:37:33.501933       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.501959       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.502066       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.502144       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.509141       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.509772       1 client.go:354] parsed scheme: ""
I0319 00:37:33.509788       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.509808       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.509870       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.517183       1 client.go:354] parsed scheme: ""
I0319 00:37:33.517205       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.517247       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.517344       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.517542       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.530615       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.531315       1 client.go:354] parsed scheme: ""
I0319 00:37:33.531448       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.531538       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.531613       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.538589       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.539033       1 client.go:354] parsed scheme: ""
I0319 00:37:33.539138       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.539201       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.539273       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.546166       1 client.go:354] parsed scheme: ""
I0319 00:37:33.546277       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:33.546341       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:33.546412       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.546571       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:33.553940       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
W0319 00:37:33.638137       1 genericapiserver.go:351] Skipping API batch/v2alpha1 because it has no resources.
W0319 00:37:33.644092       1 genericapiserver.go:351] Skipping API node.k8s.io/v1alpha1 because it has no resources.
W0319 00:37:33.653086       1 genericapiserver.go:351] Skipping API rbac.authorization.k8s.io/v1alpha1 because it has no resources.
W0319 00:37:33.654437       1 genericapiserver.go:351] Skipping API scheduling.k8s.io/v1alpha1 because it has no resources.
W0319 00:37:33.658004       1 genericapiserver.go:351] Skipping API storage.k8s.io/v1alpha1 because it has no resources.
E0319 00:37:34.209415       1 prometheus.go:55] failed to register depth metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:34.209601       1 prometheus.go:68] failed to register adds metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:34.209630       1 prometheus.go:82] failed to register latency metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:34.209651       1 prometheus.go:96] failed to register workDuration metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:34.209675       1 prometheus.go:112] failed to register unfinished metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:34.209694       1 prometheus.go:126] failed to register unfinished metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:34.209711       1 prometheus.go:152] failed to register depth metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:34.209727       1 prometheus.go:164] failed to register adds metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:34.209759       1 prometheus.go:176] failed to register latency metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:34.209967       1 prometheus.go:188] failed to register work_duration metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:34.210076       1 prometheus.go:203] failed to register unfinished_work_seconds metric admission_quota_controller: duplicate metrics collector registration attempted
E0319 00:37:34.210173       1 prometheus.go:216] failed to register longest_running_processor_microseconds metric admission_quota_controller: duplicate metrics collector registration attempted
I0319 00:37:34.210274       1 plugins.go:158] Loaded 10 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,MutatingAdmissionWebhook.
I0319 00:37:34.210302       1 plugins.go:161] Loaded 6 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,ValidatingAdmissionWebhook,ResourceQuota.
I0319 00:37:34.211497       1 client.go:354] parsed scheme: ""
I0319 00:37:34.211520       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:34.211593       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:34.211690       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:34.218393       1 client.go:354] parsed scheme: ""
I0319 00:37:34.218452       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:37:34.218508       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:37:34.218628       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:34.218822       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:34.225545       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:37:35.473896       1 secure_serving.go:116] Serving securely on [::]:8443
I0319 00:37:35.474106       1 crd_finalizer.go:255] Starting CRDFinalizer
I0319 00:37:35.474708       1 apiservice_controller.go:94] Starting APIServiceRegistrationController
I0319 00:37:35.474772       1 cache.go:32] Waiting for caches to sync for APIServiceRegistrationController controller
I0319 00:37:35.474805       1 available_controller.go:376] Starting AvailableConditionController
I0319 00:37:35.474865       1 cache.go:32] Waiting for caches to sync for AvailableConditionController controller
I0319 00:37:35.474929       1 controller.go:83] Starting OpenAPI controller
I0319 00:37:35.474976       1 customresource_discovery_controller.go:208] Starting DiscoveryController
I0319 00:37:35.475025       1 naming_controller.go:288] Starting NamingConditionController
I0319 00:37:35.475094       1 establishing_controller.go:73] Starting EstablishingController
I0319 00:37:35.475152       1 nonstructuralschema_controller.go:191] Starting NonStructuralSchemaConditionController
I0319 00:37:35.479466       1 controller.go:81] Starting OpenAPI AggregationController
I0319 00:37:35.479494       1 autoregister_controller.go:140] Starting autoregister controller
I0319 00:37:35.479498       1 cache.go:32] Waiting for caches to sync for autoregister controller
E0319 00:37:35.485193       1 controller.go:148] Unable to remove old endpoints from kubernetes service: StorageError: key not found, Code: 1, Key: /registry/masterleases/192.168.99.119, ResourceVersion: 0, AdditionalErrorMsg: 
I0319 00:37:35.539842       1 crdregistration_controller.go:112] Starting crd-autoregister controller
I0319 00:37:35.539973       1 controller_utils.go:1029] Waiting for caches to sync for crd-autoregister controller
I0319 00:37:35.642882       1 controller_utils.go:1036] Caches are synced for crd-autoregister controller
I0319 00:37:35.675324       1 cache.go:39] Caches are synced for APIServiceRegistrationController controller
I0319 00:37:35.675419       1 cache.go:39] Caches are synced for AvailableConditionController controller
I0319 00:37:35.689458       1 cache.go:39] Caches are synced for autoregister controller
I0319 00:37:35.690500       1 controller.go:606] quota admission added evaluator for: leases.coordination.k8s.io
I0319 00:37:36.473628       1 controller.go:107] OpenAPI AggregationController: Processing item 
I0319 00:37:36.473850       1 controller.go:130] OpenAPI AggregationController: action for item : Nothing (removed from the queue).
I0319 00:37:36.474749       1 controller.go:130] OpenAPI AggregationController: action for item k8s_internal_local_delegation_chain_0000000000: Nothing (removed from the queue).
I0319 00:37:36.502144       1 storage_scheduling.go:119] created PriorityClass system-node-critical with value 2000001000
I0319 00:37:36.512279       1 storage_scheduling.go:119] created PriorityClass system-cluster-critical with value 2000000000
I0319 00:37:36.512314       1 storage_scheduling.go:128] all system priority classes are created successfully or already exist.
I0319 00:37:38.045230       1 controller.go:606] quota admission added evaluator for: endpoints
I0319 00:37:38.257412       1 controller.go:606] quota admission added evaluator for: roles.rbac.authorization.k8s.io
I0319 00:37:38.537480       1 controller.go:606] quota admission added evaluator for: rolebindings.rbac.authorization.k8s.io
W0319 00:37:38.829165       1 lease.go:223] Resetting endpoints for master service "kubernetes" to [192.168.99.119]
I0319 00:37:39.304121       1 controller.go:606] quota admission added evaluator for: serviceaccounts
I0319 00:37:40.389020       1 controller.go:606] quota admission added evaluator for: deployments.apps
I0319 00:37:40.745611       1 controller.go:606] quota admission added evaluator for: daemonsets.apps
I0319 00:37:45.804550       1 controller.go:606] quota admission added evaluator for: replicasets.apps
I0319 00:37:46.168254       1 controller.go:606] quota admission added evaluator for: controllerrevisions.apps
I0319 00:41:13.472438       1 controller.go:606] quota admission added evaluator for: deployments.extensions
E0319 00:41:42.999427       1 upgradeaware.go:343] Error proxying data from client to backend: read tcp 192.168.99.119:8443->192.168.99.1:49034: read: connection reset by peer
I0319 00:41:48.441463       1 client.go:354] parsed scheme: ""
I0319 00:41:48.441492       1 client.go:354] scheme "" not registered, fallback to default scheme
I0319 00:41:48.441544       1 asm_amd64.s:1337] ccResolverWrapper: sending new addresses to cc: [{127.0.0.1:2379 0  <nil>}]
I0319 00:41:48.441678       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
I0319 00:41:48.460958       1 asm_amd64.s:1337] balancerWrapper: got update addr from Notify: [{127.0.0.1:2379 <nil>}]
==== END logs for container kube-apiserver of pod kube-system/kube-apiserver-minikube ====
==== START logs for container kube-controller-manager of pod kube-system/kube-controller-manager-minikube ====
I0319 00:37:32.215644       1 serving.go:319] Generated self-signed cert in-memory
I0319 00:37:32.587361       1 controllermanager.go:164] Version: v1.15.4
I0319 00:37:32.587710       1 secure_serving.go:116] Serving securely on 127.0.0.1:10257
I0319 00:37:32.588180       1 deprecated_insecure_serving.go:53] Serving insecurely on [::]:10252
I0319 00:37:32.588250       1 leaderelection.go:235] attempting to acquire leader lease  kube-system/kube-controller-manager...
E0319 00:37:35.559453       1 leaderelection.go:324] error retrieving resource lock kube-system/kube-controller-manager: endpoints "kube-controller-manager" is forbidden: User "system:kube-controller-manager" cannot get resource "endpoints" in API group "" in the namespace "kube-system"
I0319 00:37:38.055561       1 leaderelection.go:245] successfully acquired lease kube-system/kube-controller-manager
I0319 00:37:38.056403       1 event.go:258] Event(v1.ObjectReference{Kind:"Endpoints", Namespace:"kube-system", Name:"kube-controller-manager", UID:"7caf072c-eca3-4675-9ef8-0e7275cfb9f5", APIVersion:"v1", ResourceVersion:"128", FieldPath:""}): type: 'Normal' reason: 'LeaderElection' minikube_3a1d2611-0b51-4707-b890-19f162bbee51 became leader
I0319 00:37:39.281744       1 plugins.go:103] No cloud provider specified.
I0319 00:37:39.289133       1 controller_utils.go:1029] Waiting for caches to sync for tokens controller
I0319 00:37:39.393010       1 controller_utils.go:1036] Caches are synced for tokens controller
I0319 00:37:39.426940       1 controllermanager.go:532] Started "job"
I0319 00:37:39.427892       1 job_controller.go:143] Starting job controller
I0319 00:37:39.427995       1 controller_utils.go:1029] Waiting for caches to sync for job controller
I0319 00:37:39.449312       1 controllermanager.go:532] Started "clusterrole-aggregation"
I0319 00:37:39.449565       1 clusterroleaggregation_controller.go:148] Starting ClusterRoleAggregator
I0319 00:37:39.449601       1 controller_utils.go:1029] Waiting for caches to sync for ClusterRoleAggregator controller
I0319 00:37:39.462851       1 controllermanager.go:532] Started "daemonset"
I0319 00:37:39.463096       1 daemon_controller.go:267] Starting daemon sets controller
I0319 00:37:39.463118       1 controller_utils.go:1029] Waiting for caches to sync for daemon sets controller
I0319 00:37:39.481295       1 controllermanager.go:532] Started "disruption"
I0319 00:37:39.483673       1 disruption.go:333] Starting disruption controller
I0319 00:37:39.484107       1 controller_utils.go:1029] Waiting for caches to sync for disruption controller
I0319 00:37:39.495437       1 controllermanager.go:532] Started "csrapproving"
W0319 00:37:39.495460       1 controllermanager.go:524] Skipping "root-ca-cert-publisher"
I0319 00:37:39.495645       1 certificate_controller.go:113] Starting certificate controller
I0319 00:37:39.495657       1 controller_utils.go:1029] Waiting for caches to sync for certificate controller
I0319 00:37:39.520933       1 controllermanager.go:532] Started "namespace"
I0319 00:37:39.521034       1 namespace_controller.go:186] Starting namespace controller
I0319 00:37:39.521203       1 controller_utils.go:1029] Waiting for caches to sync for namespace controller
I0319 00:37:40.150794       1 controllermanager.go:532] Started "horizontalpodautoscaling"
I0319 00:37:40.151099       1 horizontal.go:156] Starting HPA controller
I0319 00:37:40.151192       1 controller_utils.go:1029] Waiting for caches to sync for HPA controller
I0319 00:37:40.390513       1 controllermanager.go:532] Started "tokencleaner"
I0319 00:37:40.390547       1 tokencleaner.go:116] Starting token cleaner controller
I0319 00:37:40.390577       1 controller_utils.go:1029] Waiting for caches to sync for token_cleaner controller
I0319 00:37:40.491406       1 controller_utils.go:1036] Caches are synced for token_cleaner controller
I0319 00:37:40.647057       1 node_lifecycle_controller.go:77] Sending events to api server
E0319 00:37:40.647517       1 core.go:160] failed to start cloud node lifecycle controller: no cloud provider provided
W0319 00:37:40.647904       1 controllermanager.go:524] Skipping "cloud-node-lifecycle"
I0319 00:37:40.910409       1 controllermanager.go:532] Started "persistentvolume-binder"
I0319 00:37:40.910891       1 pv_controller_base.go:282] Starting persistent volume controller
I0319 00:37:40.910949       1 controller_utils.go:1029] Waiting for caches to sync for persistent volume controller
I0319 00:37:41.141312       1 controllermanager.go:532] Started "pv-protection"
I0319 00:37:41.141341       1 pv_protection_controller.go:82] Starting PV protection controller
I0319 00:37:41.141351       1 controller_utils.go:1029] Waiting for caches to sync for PV protection controller
I0319 00:37:41.390796       1 controllermanager.go:532] Started "pvc-protection"
I0319 00:37:41.390831       1 pvc_protection_controller.go:100] Starting PVC protection controller
I0319 00:37:41.390843       1 controller_utils.go:1029] Waiting for caches to sync for PVC protection controller
I0319 00:37:41.647245       1 controllermanager.go:532] Started "replicationcontroller"
I0319 00:37:41.647562       1 replica_set.go:182] Starting replicationcontroller controller
I0319 00:37:41.647709       1 controller_utils.go:1029] Waiting for caches to sync for ReplicationController controller
I0319 00:37:41.895240       1 controllermanager.go:532] Started "deployment"
I0319 00:37:41.895920       1 deployment_controller.go:152] Starting deployment controller
I0319 00:37:41.896398       1 controller_utils.go:1029] Waiting for caches to sync for deployment controller
I0319 00:37:42.145570       1 controllermanager.go:532] Started "replicaset"
I0319 00:37:42.145874       1 replica_set.go:182] Starting replicaset controller
I0319 00:37:42.146107       1 controller_utils.go:1029] Waiting for caches to sync for ReplicaSet controller
I0319 00:37:42.396585       1 controllermanager.go:532] Started "statefulset"
I0319 00:37:42.396974       1 stateful_set.go:145] Starting stateful set controller
I0319 00:37:42.397367       1 controller_utils.go:1029] Waiting for caches to sync for stateful set controller
I0319 00:37:42.646485       1 controllermanager.go:532] Started "cronjob"
I0319 00:37:42.646731       1 cronjob_controller.go:96] Starting CronJob Manager
I0319 00:37:42.896471       1 controllermanager.go:532] Started "ttl"
I0319 00:37:42.897086       1 ttl_controller.go:116] Starting TTL controller
I0319 00:37:42.897191       1 controller_utils.go:1029] Waiting for caches to sync for TTL controller
W0319 00:37:42.897108       1 controllermanager.go:524] Skipping "nodeipam"
I0319 00:37:43.709926       1 garbagecollector.go:128] Starting garbage collector controller
I0319 00:37:43.710064       1 controller_utils.go:1029] Waiting for caches to sync for garbage collector controller
I0319 00:37:43.710301       1 graph_builder.go:280] GraphBuilder running
I0319 00:37:43.710583       1 controllermanager.go:532] Started "garbagecollector"
I0319 00:37:43.732510       1 controllermanager.go:532] Started "csrcleaner"
I0319 00:37:43.733249       1 cleaner.go:81] Starting CSR cleaner controller
I0319 00:37:43.741098       1 node_lifecycle_controller.go:290] Sending events to api server.
I0319 00:37:43.741611       1 node_lifecycle_controller.go:323] Controller is using taint based evictions.
I0319 00:37:43.741798       1 taint_manager.go:175] Sending events to api server.
I0319 00:37:43.742773       1 node_lifecycle_controller.go:388] Controller will reconcile labels.
I0319 00:37:43.742817       1 node_lifecycle_controller.go:401] Controller will taint node by condition.
I0319 00:37:43.742897       1 controllermanager.go:532] Started "nodelifecycle"
I0319 00:37:43.743051       1 node_lifecycle_controller.go:425] Starting node controller
I0319 00:37:43.743067       1 controller_utils.go:1029] Waiting for caches to sync for taint controller
W0319 00:37:43.850276       1 probe.go:268] Flexvolume plugin directory at /usr/libexec/kubernetes/kubelet-plugins/volume/exec/ does not exist. Recreating.
I0319 00:37:43.850926       1 controllermanager.go:532] Started "attachdetach"
I0319 00:37:43.851058       1 attach_detach_controller.go:335] Starting attach detach controller
I0319 00:37:43.851102       1 controller_utils.go:1029] Waiting for caches to sync for attach detach controller
E0319 00:37:43.995067       1 prometheus.go:55] failed to register depth metric certificate: duplicate metrics collector registration attempted
E0319 00:37:43.995294       1 prometheus.go:68] failed to register adds metric certificate: duplicate metrics collector registration attempted
E0319 00:37:43.996167       1 prometheus.go:82] failed to register latency metric certificate: duplicate metrics collector registration attempted
E0319 00:37:43.996601       1 prometheus.go:96] failed to register workDuration metric certificate: duplicate metrics collector registration attempted
E0319 00:37:43.996925       1 prometheus.go:112] failed to register unfinished metric certificate: duplicate metrics collector registration attempted
E0319 00:37:43.997377       1 prometheus.go:126] failed to register unfinished metric certificate: duplicate metrics collector registration attempted
E0319 00:37:43.997572       1 prometheus.go:152] failed to register depth metric certificate: duplicate metrics collector registration attempted
E0319 00:37:43.997864       1 prometheus.go:164] failed to register adds metric certificate: duplicate metrics collector registration attempted
E0319 00:37:43.998439       1 prometheus.go:176] failed to register latency metric certificate: duplicate metrics collector registration attempted
E0319 00:37:43.998973       1 prometheus.go:188] failed to register work_duration metric certificate: duplicate metrics collector registration attempted
E0319 00:37:43.999382       1 prometheus.go:203] failed to register unfinished_work_seconds metric certificate: duplicate metrics collector registration attempted
E0319 00:37:43.999695       1 prometheus.go:216] failed to register longest_running_processor_microseconds metric certificate: duplicate metrics collector registration attempted
E0319 00:37:43.999946       1 prometheus.go:139] failed to register retries metric certificate: duplicate metrics collector registration attempted
E0319 00:37:44.000221       1 prometheus.go:228] failed to register retries metric certificate: duplicate metrics collector registration attempted
I0319 00:37:44.001356       1 controllermanager.go:532] Started "csrsigning"
I0319 00:37:44.002078       1 core.go:170] Will not configure cloud provider routes for allocate-node-cidrs: false, configure-cloud-routes: true.
W0319 00:37:44.002774       1 controllermanager.go:524] Skipping "route"
I0319 00:37:44.001997       1 certificate_controller.go:113] Starting certificate controller
I0319 00:37:44.003932       1 controller_utils.go:1029] Waiting for caches to sync for certificate controller
I0319 00:37:44.243978       1 controllermanager.go:532] Started "persistentvolume-expander"
W0319 00:37:44.244050       1 controllermanager.go:524] Skipping "ttl-after-finished"
I0319 00:37:44.244131       1 expand_controller.go:300] Starting expand controller
I0319 00:37:44.244198       1 controller_utils.go:1029] Waiting for caches to sync for expand controller
I0319 00:37:44.496754       1 controllermanager.go:532] Started "endpoint"
I0319 00:37:44.497401       1 endpoints_controller.go:166] Starting endpoint controller
I0319 00:37:44.497598       1 controller_utils.go:1029] Waiting for caches to sync for endpoint controller
I0319 00:37:44.951450       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for replicasets.extensions
I0319 00:37:44.952136       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for statefulsets.apps
I0319 00:37:44.952687       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for controllerrevisions.apps
I0319 00:37:44.953127       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for daemonsets.apps
I0319 00:37:44.953463       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for cronjobs.batch
I0319 00:37:44.953774       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for endpoints
I0319 00:37:44.954246       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for deployments.extensions
I0319 00:37:44.954421       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for events.events.k8s.io
I0319 00:37:44.954544       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for ingresses.extensions
I0319 00:37:44.954819       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for ingresses.networking.k8s.io
I0319 00:37:44.955161       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for roles.rbac.authorization.k8s.io
I0319 00:37:44.955824       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for podtemplates
I0319 00:37:44.956002       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for limitranges
I0319 00:37:44.956262       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for daemonsets.extensions
I0319 00:37:44.956689       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for serviceaccounts
I0319 00:37:44.957468       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for replicasets.apps
I0319 00:37:44.957644       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for leases.coordination.k8s.io
I0319 00:37:44.957918       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for networkpolicies.networking.k8s.io
I0319 00:37:44.958358       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for poddisruptionbudgets.policy
I0319 00:37:44.958549       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for rolebindings.rbac.authorization.k8s.io
I0319 00:37:44.958870       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for networkpolicies.extensions
I0319 00:37:44.959359       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for jobs.batch
I0319 00:37:44.959707       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for horizontalpodautoscalers.autoscaling
I0319 00:37:44.960253       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for deployments.apps
I0319 00:37:44.960395       1 controllermanager.go:532] Started "resourcequota"
I0319 00:37:44.960613       1 resource_quota_controller.go:271] Starting resource quota controller
I0319 00:37:44.960708       1 controller_utils.go:1029] Waiting for caches to sync for resource quota controller
I0319 00:37:44.960969       1 resource_quota_monitor.go:303] QuotaMonitor running
I0319 00:37:44.990947       1 controllermanager.go:532] Started "serviceaccount"
I0319 00:37:44.991082       1 serviceaccounts_controller.go:117] Starting service account controller
I0319 00:37:44.991139       1 controller_utils.go:1029] Waiting for caches to sync for service account controller
I0319 00:37:45.247664       1 controllermanager.go:532] Started "bootstrapsigner"
I0319 00:37:45.248804       1 controller_utils.go:1029] Waiting for caches to sync for bootstrap_signer controller
E0319 00:37:45.491162       1 core.go:76] Failed to start service controller: WARNING: no cloud provider provided, services of type LoadBalancer will fail
W0319 00:37:45.491185       1 controllermanager.go:524] Skipping "service"
I0319 00:37:45.744952       1 controllermanager.go:532] Started "podgc"
I0319 00:37:45.747354       1 gc_controller.go:76] Starting GC controller
I0319 00:37:45.747412       1 controller_utils.go:1029] Waiting for caches to sync for GC controller
I0319 00:37:45.752710       1 controller_utils.go:1029] Waiting for caches to sync for garbage collector controller
W0319 00:37:45.775647       1 actual_state_of_world.go:506] Failed to update statusUpdateNeeded field in actual state of world: Failed to set statusUpdateNeeded to needed true, because nodeName="minikube" does not exist
I0319 00:37:45.797357       1 controller_utils.go:1036] Caches are synced for TTL controller
I0319 00:37:45.797920       1 controller_utils.go:1036] Caches are synced for endpoint controller
I0319 00:37:45.803328       1 controller_utils.go:1036] Caches are synced for service account controller
I0319 00:37:45.803339       1 controller_utils.go:1036] Caches are synced for deployment controller
I0319 00:37:45.806892       1 event.go:258] Event(v1.ObjectReference{Kind:"Deployment", Namespace:"kube-system", Name:"coredns", UID:"230406d9-6779-4ede-9fda-a9b69de9a12a", APIVersion:"apps/v1", ResourceVersion:"208", FieldPath:""}): type: 'Normal' reason: 'ScalingReplicaSet' Scaled up replica set coredns-5c98db65d4 to 2
I0319 00:37:45.821764       1 controller_utils.go:1036] Caches are synced for namespace controller
I0319 00:37:45.842191       1 controller_utils.go:1036] Caches are synced for PV protection controller
I0319 00:37:45.845072       1 controller_utils.go:1036] Caches are synced for taint controller
I0319 00:37:45.845813       1 node_lifecycle_controller.go:1159] Initializing eviction metric for zone: 
I0319 00:37:45.846030       1 taint_manager.go:198] Starting NoExecuteTaintManager
I0319 00:37:45.846156       1 event.go:258] Event(v1.ObjectReference{Kind:"Node", Namespace:"", Name:"minikube", UID:"17d30152-4bd6-4d7d-87d4-040085d043ad", APIVersion:"", ResourceVersion:"", FieldPath:""}): type: 'Normal' reason: 'RegisteredNode' Node minikube event: Registered Node minikube in Controller
W0319 00:37:45.846216       1 node_lifecycle_controller.go:833] Missing timestamp for Node minikube. Assuming now as a timestamp.
I0319 00:37:45.846257       1 node_lifecycle_controller.go:1059] Controller detected that zone  is now in state Normal.
I0319 00:37:45.846436       1 controller_utils.go:1036] Caches are synced for ReplicaSet controller
I0319 00:37:45.847812       1 controller_utils.go:1036] Caches are synced for GC controller
I0319 00:37:45.850127       1 controller_utils.go:1036] Caches are synced for ClusterRoleAggregator controller
I0319 00:37:45.854835       1 event.go:258] Event(v1.ObjectReference{Kind:"ReplicaSet", Namespace:"kube-system", Name:"coredns-5c98db65d4", UID:"2eed46eb-cc19-4766-bf41-29878b3587cc", APIVersion:"apps/v1", ResourceVersion:"310", FieldPath:""}): type: 'Normal' reason: 'SuccessfulCreate' Created pod: coredns-5c98db65d4-8zb2q
I0319 00:37:45.862526       1 event.go:258] Event(v1.ObjectReference{Kind:"ReplicaSet", Namespace:"kube-system", Name:"coredns-5c98db65d4", UID:"2eed46eb-cc19-4766-bf41-29878b3587cc", APIVersion:"apps/v1", ResourceVersion:"310", FieldPath:""}): type: 'Normal' reason: 'SuccessfulCreate' Created pod: coredns-5c98db65d4-fmhtl
E0319 00:37:45.892488       1 clusterroleaggregation_controller.go:180] admin failed with : Operation cannot be fulfilled on clusterroles.rbac.authorization.k8s.io "admin": the object has been modified; please apply your changes to the latest version and try again
E0319 00:37:45.904732       1 clusterroleaggregation_controller.go:180] admin failed with : Operation cannot be fulfilled on clusterroles.rbac.authorization.k8s.io "admin": the object has been modified; please apply your changes to the latest version and try again
I0319 00:37:45.952373       1 controller_utils.go:1036] Caches are synced for HPA controller
I0319 00:37:46.164104       1 controller_utils.go:1036] Caches are synced for daemon sets controller
I0319 00:37:46.175360       1 event.go:258] Event(v1.ObjectReference{Kind:"DaemonSet", Namespace:"kube-system", Name:"kube-proxy", UID:"f861ee2d-6374-4fa1-8a20-c63c3d45f509", APIVersion:"apps/v1", ResourceVersion:"221", FieldPath:""}): type: 'Normal' reason: 'SuccessfulCreate' Created pod: kube-proxy-xvjhl
E0319 00:37:46.199040       1 daemon_controller.go:302] kube-system/kube-proxy failed with : error storing status for daemon set &v1.DaemonSet{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"kube-proxy", GenerateName:"", Namespace:"kube-system", SelfLink:"/apis/apps/v1/namespaces/kube-system/daemonsets/kube-proxy", UID:"f861ee2d-6374-4fa1-8a20-c63c3d45f509", ResourceVersion:"221", Generation:1, CreationTimestamp:v1.Time{Time:time.Time{wall:0x0, ext:63720175060, loc:(*time.Location)(0x731cba0)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"k8s-app":"kube-proxy"}, Annotations:map[string]string{"deprecated.daemonset.template.generation":"1"}, OwnerReferences:[]v1.OwnerReference(nil), Initializers:(*v1.Initializers)(nil), Finalizers:[]string(nil), ClusterName:"", ManagedFields:[]v1.ManagedFieldsEntry(nil)}, Spec:v1.DaemonSetSpec{Selector:(*v1.LabelSelector)(0xc001b1b180), Template:v1.PodTemplateSpec{ObjectMeta:v1.ObjectMeta{Name:"", GenerateName:"", Namespace:"", SelfLink:"", UID:"", ResourceVersion:"", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"k8s-app":"kube-proxy"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Initializers:(*v1.Initializers)(nil), Finalizers:[]string(nil), ClusterName:"", ManagedFields:[]v1.ManagedFieldsEntry(nil)}, Spec:v1.PodSpec{Volumes:[]v1.Volume{v1.Volume{Name:"kube-proxy", VolumeSource:v1.VolumeSource{HostPath:(*v1.HostPathVolumeSource)(nil), EmptyDir:(*v1.EmptyDirVolumeSource)(nil), GCEPersistentDisk:(*v1.GCEPersistentDiskVolumeSource)(nil), AWSElasticBlockStore:(*v1.AWSElasticBlockStoreVolumeSource)(nil), GitRepo:(*v1.GitRepoVolumeSource)(nil), Secret:(*v1.SecretVolumeSource)(nil), NFS:(*v1.NFSVolumeSource)(nil), ISCSI:(*v1.ISCSIVolumeSource)(nil), Glusterfs:(*v1.GlusterfsVolumeSource)(nil), PersistentVolumeClaim:(*v1.PersistentVolumeClaimVolumeSource)(nil), RBD:(*v1.RBDVolumeSource)(nil), FlexVolume:(*v1.FlexVolumeSource)(nil), Cinder:(*v1.CinderVolumeSource)(nil), CephFS:(*v1.CephFSVolumeSource)(nil), Flocker:(*v1.FlockerVolumeSource)(nil), DownwardAPI:(*v1.DownwardAPIVolumeSource)(nil), FC:(*v1.FCVolumeSource)(nil), AzureFile:(*v1.AzureFileVolumeSource)(nil), ConfigMap:(*v1.ConfigMapVolumeSource)(0xc001c6ef40), VsphereVolume:(*v1.VsphereVirtualDiskVolumeSource)(nil), Quobyte:(*v1.QuobyteVolumeSource)(nil), AzureDisk:(*v1.AzureDiskVolumeSource)(nil), PhotonPersistentDisk:(*v1.PhotonPersistentDiskVolumeSource)(nil), Projected:(*v1.ProjectedVolumeSource)(nil), PortworxVolume:(*v1.PortworxVolumeSource)(nil), ScaleIO:(*v1.ScaleIOVolumeSource)(nil), StorageOS:(*v1.StorageOSVolumeSource)(nil), CSI:(*v1.CSIVolumeSource)(nil)}}, v1.Volume{Name:"xtables-lock", VolumeSource:v1.VolumeSource{HostPath:(*v1.HostPathVolumeSource)(0xc001b1b1a0), EmptyDir:(*v1.EmptyDirVolumeSource)(nil), GCEPersistentDisk:(*v1.GCEPersistentDiskVolumeSource)(nil), AWSElasticBlockStore:(*v1.AWSElasticBlockStoreVolumeSource)(nil), GitRepo:(*v1.GitRepoVolumeSource)(nil), Secret:(*v1.SecretVolumeSource)(nil), NFS:(*v1.NFSVolumeSource)(nil), ISCSI:(*v1.ISCSIVolumeSource)(nil), Glusterfs:(*v1.GlusterfsVolumeSource)(nil), PersistentVolumeClaim:(*v1.PersistentVolumeClaimVolumeSource)(nil), RBD:(*v1.RBDVolumeSource)(nil), FlexVolume:(*v1.FlexVolumeSource)(nil), Cinder:(*v1.CinderVolumeSource)(nil), CephFS:(*v1.CephFSVolumeSource)(nil), Flocker:(*v1.FlockerVolumeSource)(nil), DownwardAPI:(*v1.DownwardAPIVolumeSource)(nil), FC:(*v1.FCVolumeSource)(nil), AzureFile:(*v1.AzureFileVolumeSource)(nil), ConfigMap:(*v1.ConfigMapVolumeSource)(nil), VsphereVolume:(*v1.VsphereVirtualDiskVolumeSource)(nil), Quobyte:(*v1.QuobyteVolumeSource)(nil), AzureDisk:(*v1.AzureDiskVolumeSource)(nil), PhotonPersistentDisk:(*v1.PhotonPersistentDiskVolumeSource)(nil), Projected:(*v1.ProjectedVolumeSource)(nil), PortworxVolume:(*v1.PortworxVolumeSource)(nil), ScaleIO:(*v1.ScaleIOVolumeSource)(nil), StorageOS:(*v1.StorageOSVolumeSource)(nil), CSI:(*v1.CSIVolumeSource)(nil)}}, v1.Volume{Name:"lib-modules", VolumeSource:v1.VolumeSource{HostPath:(*v1.HostPathVolumeSource)(0xc001b1b1c0), EmptyDir:(*v1.EmptyDirVolumeSource)(nil), GCEPersistentDisk:(*v1.GCEPersistentDiskVolumeSource)(nil), AWSElasticBlockStore:(*v1.AWSElasticBlockStoreVolumeSource)(nil), GitRepo:(*v1.GitRepoVolumeSource)(nil), Secret:(*v1.SecretVolumeSource)(nil), NFS:(*v1.NFSVolumeSource)(nil), ISCSI:(*v1.ISCSIVolumeSource)(nil), Glusterfs:(*v1.GlusterfsVolumeSource)(nil), PersistentVolumeClaim:(*v1.PersistentVolumeClaimVolumeSource)(nil), RBD:(*v1.RBDVolumeSource)(nil), FlexVolume:(*v1.FlexVolumeSource)(nil), Cinder:(*v1.CinderVolumeSource)(nil), CephFS:(*v1.CephFSVolumeSource)(nil), Flocker:(*v1.FlockerVolumeSource)(nil), DownwardAPI:(*v1.DownwardAPIVolumeSource)(nil), FC:(*v1.FCVolumeSource)(nil), AzureFile:(*v1.AzureFileVolumeSource)(nil), ConfigMap:(*v1.ConfigMapVolumeSource)(nil), VsphereVolume:(*v1.VsphereVirtualDiskVolumeSource)(nil), Quobyte:(*v1.QuobyteVolumeSource)(nil), AzureDisk:(*v1.AzureDiskVolumeSource)(nil), PhotonPersistentDisk:(*v1.PhotonPersistentDiskVolumeSource)(nil), Projected:(*v1.ProjectedVolumeSource)(nil), PortworxVolume:(*v1.PortworxVolumeSource)(nil), ScaleIO:(*v1.ScaleIOVolumeSource)(nil), StorageOS:(*v1.StorageOSVolumeSource)(nil), CSI:(*v1.CSIVolumeSource)(nil)}}}, InitContainers:[]v1.Container(nil), Containers:[]v1.Container{v1.Container{Name:"kube-proxy", Image:"k8s.gcr.io/kube-proxy:v1.15.4", Command:[]string{"/usr/local/bin/kube-proxy", "--config=/var/lib/kube-proxy/config.conf", "--hostname-override=$(NODE_NAME)"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar{v1.EnvVar{Name:"NODE_NAME", Value:"", ValueFrom:(*v1.EnvVarSource)(0xc001b1b200)}}, Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil)}, VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-proxy", ReadOnly:false, MountPath:"/var/lib/kube-proxy", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}, v1.VolumeMount{Name:"xtables-lock", ReadOnly:false, MountPath:"/run/xtables.lock", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}, v1.VolumeMount{Name:"lib-modules", ReadOnly:true, MountPath:"/lib/modules", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(0xc001b71bd0), Stdin:false, StdinOnce:false, TTY:false}}, RestartPolicy:"Always", TerminationGracePeriodSeconds:(*int64)(0xc001aab148), ActiveDeadlineSeconds:(*int64)(nil), DNSPolicy:"ClusterFirst", NodeSelector:map[string]string{"beta.kubernetes.io/os":"linux"}, ServiceAccountName:"kube-proxy", DeprecatedServiceAccount:"kube-proxy", AutomountServiceAccountToken:(*bool)(nil), NodeName:"", HostNetwork:true, HostPID:false, HostIPC:false, ShareProcessNamespace:(*bool)(nil), SecurityContext:(*v1.PodSecurityContext)(0xc001c801e0), ImagePullSecrets:[]v1.LocalObjectReference(nil), Hostname:"", Subdomain:"", Affinity:(*v1.Affinity)(nil), SchedulerName:"default-scheduler", Tolerations:[]v1.Toleration{v1.Toleration{Key:"CriticalAddonsOnly", Operator:"Exists", Value:"", Effect:"", TolerationSeconds:(*int64)(nil)}, v1.Toleration{Key:"", Operator:"Exists", Value:"", Effect:"", TolerationSeconds:(*int64)(nil)}}, HostAliases:[]v1.HostAlias(nil), PriorityClassName:"system-node-critical", Priority:(*int32)(nil), DNSConfig:(*v1.PodDNSConfig)(nil), ReadinessGates:[]v1.PodReadinessGate(nil), RuntimeClassName:(*string)(nil), EnableServiceLinks:(*bool)(nil), PreemptionPolicy:(*v1.PreemptionPolicy)(nil)}}, UpdateStrategy:v1.DaemonSetUpdateStrategy{Type:"RollingUpdate", RollingUpdate:(*v1.RollingUpdateDaemonSet)(0xc0000b4cc8)}, MinReadySeconds:0, RevisionHistoryLimit:(*int32)(0xc001aab188)}, Status:v1.DaemonSetStatus{CurrentNumberScheduled:0, NumberMisscheduled:0, DesiredNumberScheduled:0, NumberReady:0, ObservedGeneration:0, UpdatedNumberScheduled:0, NumberAvailable:0, NumberUnavailable:0, CollisionCount:(*int32)(nil), Conditions:[]v1.DaemonSetCondition(nil)}}: Operation cannot be fulfilled on daemonsets.apps "kube-proxy": the object has been modified; please apply your changes to the latest version and try again
I0319 00:37:46.211517       1 controller_utils.go:1036] Caches are synced for persistent volume controller
I0319 00:37:46.244807       1 controller_utils.go:1036] Caches are synced for expand controller
I0319 00:37:46.250075       1 controller_utils.go:1036] Caches are synced for bootstrap_signer controller
I0319 00:37:46.251597       1 controller_utils.go:1036] Caches are synced for attach detach controller
I0319 00:37:46.291390       1 controller_utils.go:1036] Caches are synced for PVC protection controller
I0319 00:37:46.298983       1 controller_utils.go:1036] Caches are synced for stateful set controller
I0319 00:37:46.429156       1 controller_utils.go:1036] Caches are synced for job controller
I0319 00:37:46.448436       1 controller_utils.go:1036] Caches are synced for ReplicationController controller
I0319 00:37:46.484650       1 controller_utils.go:1036] Caches are synced for disruption controller
I0319 00:37:46.484673       1 disruption.go:341] Sending events to api server.
I0319 00:37:46.496140       1 controller_utils.go:1036] Caches are synced for certificate controller
I0319 00:37:46.504238       1 controller_utils.go:1036] Caches are synced for certificate controller
I0319 00:37:46.514038       1 log.go:172] [INFO] signed certificate with serial number 706792922357935424116499589955559285822568057362
I0319 00:37:46.553256       1 controller_utils.go:1036] Caches are synced for garbage collector controller
I0319 00:37:46.561268       1 controller_utils.go:1036] Caches are synced for resource quota controller
I0319 00:37:46.610498       1 controller_utils.go:1036] Caches are synced for garbage collector controller
I0319 00:37:46.610517       1 garbagecollector.go:137] Garbage collector: all resource monitors have synced. Proceeding to collect garbage
I0319 00:37:46.648753       1 controller_utils.go:1029] Waiting for caches to sync for resource quota controller
I0319 00:37:46.749101       1 controller_utils.go:1036] Caches are synced for resource quota controller
I0319 00:41:13.480509       1 event.go:258] Event(v1.ObjectReference{Kind:"Deployment", Namespace:"kube-system", Name:"tiller-deploy", UID:"3581a785-00d4-483f-89c0-1028f12890df", APIVersion:"apps/v1", ResourceVersion:"665", FieldPath:""}): type: 'Normal' reason: 'ScalingReplicaSet' Scaled up replica set tiller-deploy-7bf78cdbf7 to 1
I0319 00:41:13.490659       1 event.go:258] Event(v1.ObjectReference{Kind:"ReplicaSet", Namespace:"kube-system", Name:"tiller-deploy-7bf78cdbf7", UID:"1bd2f5bb-ce1b-4d0a-9e29-045d43633e6e", APIVersion:"apps/v1", ResourceVersion:"666", FieldPath:""}): type: 'Normal' reason: 'SuccessfulCreate' Created pod: tiller-deploy-7bf78cdbf7-tbfkj
I0319 00:41:42.676669       1 event.go:258] Event(v1.ObjectReference{Kind:"Deployment", Namespace:"default", Name:"flux-local", UID:"410dbe31-a5b3-46cf-b737-06595a408006", APIVersion:"apps/v1", ResourceVersion:"748", FieldPath:""}): type: 'Normal' reason: 'ScalingReplicaSet' Scaled up replica set flux-local-7964ff9f7b to 1
I0319 00:41:42.690939       1 event.go:258] Event(v1.ObjectReference{Kind:"ReplicaSet", Namespace:"default", Name:"flux-local-7964ff9f7b", UID:"e9605e6b-b434-4bc8-8c2a-5e950c861150", APIVersion:"apps/v1", ResourceVersion:"749", FieldPath:""}): type: 'Normal' reason: 'SuccessfulCreate' Created pod: flux-local-7964ff9f7b-5rsjj
I0319 00:41:42.692900       1 event.go:258] Event(v1.ObjectReference{Kind:"Deployment", Namespace:"default", Name:"flux-local-helm-operator", UID:"0ae0b6b7-c129-415e-99d5-69bcf3b978bd", APIVersion:"apps/v1", ResourceVersion:"750", FieldPath:""}): type: 'Normal' reason: 'ScalingReplicaSet' Scaled up replica set flux-local-helm-operator-76c9b48b9c to 1
I0319 00:41:42.749689       1 event.go:258] Event(v1.ObjectReference{Kind:"ReplicaSet", Namespace:"default", Name:"flux-local-helm-operator-76c9b48b9c", UID:"cfb742df-853a-4f03-bc3a-56f87927994d", APIVersion:"apps/v1", ResourceVersion:"751", FieldPath:""}): type: 'Normal' reason: 'SuccessfulCreate' Created pod: flux-local-helm-operator-76c9b48b9c-glvl6
I0319 00:41:42.774656       1 event.go:258] Event(v1.ObjectReference{Kind:"Deployment", Namespace:"default", Name:"flux-local-memcached", UID:"3ce41945-4d84-4070-8ad8-b5c0a00bf651", APIVersion:"apps/v1", ResourceVersion:"754", FieldPath:""}): type: 'Normal' reason: 'ScalingReplicaSet' Scaled up replica set flux-local-memcached-6c5d47fc8c to 1
I0319 00:41:42.815984       1 event.go:258] Event(v1.ObjectReference{Kind:"ReplicaSet", Namespace:"default", Name:"flux-local-memcached-6c5d47fc8c", UID:"01125c5a-6894-4099-b683-896b794f04a1", APIVersion:"apps/v1", ResourceVersion:"760", FieldPath:""}): type: 'Normal' reason: 'SuccessfulCreate' Created pod: flux-local-memcached-6c5d47fc8c-szhqj
I0319 00:41:48.436752       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for helmreleases.flux.weave.works
I0319 00:41:48.437054       1 controller_utils.go:1029] Waiting for caches to sync for resource quota controller
I0319 00:41:48.505007       1 controller_utils.go:1029] Waiting for caches to sync for garbage collector controller
I0319 00:41:48.537955       1 controller_utils.go:1036] Caches are synced for resource quota controller
I0319 00:41:48.605979       1 controller_utils.go:1036] Caches are synced for garbage collector controller
==== END logs for container kube-controller-manager of pod kube-system/kube-controller-manager-minikube ====
==== START logs for container kube-proxy of pod kube-system/kube-proxy-xvjhl ====
W0319 00:37:47.731892       1 server_others.go:249] Flag proxy-mode="" unknown, assuming iptables proxy
I0319 00:37:47.739246       1 server_others.go:143] Using iptables Proxier.
W0319 00:37:47.739469       1 proxier.go:321] clusterCIDR not specified, unable to distinguish between internal and external traffic
I0319 00:37:47.745167       1 server.go:534] Version: v1.15.4
I0319 00:37:47.750004       1 conntrack.go:100] Set sysctl 'net/netfilter/nf_conntrack_max' to 131072
I0319 00:37:47.750119       1 conntrack.go:52] Setting nf_conntrack_max to 131072
I0319 00:37:47.750421       1 conntrack.go:83] Setting conntrack hashsize to 32768
I0319 00:37:47.754872       1 conntrack.go:100] Set sysctl 'net/netfilter/nf_conntrack_tcp_timeout_established' to 86400
I0319 00:37:47.754932       1 conntrack.go:100] Set sysctl 'net/netfilter/nf_conntrack_tcp_timeout_close_wait' to 3600
I0319 00:37:47.755736       1 config.go:187] Starting service config controller
I0319 00:37:47.755762       1 controller_utils.go:1029] Waiting for caches to sync for service config controller
I0319 00:37:47.755799       1 config.go:96] Starting endpoints config controller
I0319 00:37:47.755813       1 controller_utils.go:1029] Waiting for caches to sync for endpoints config controller
I0319 00:37:47.855888       1 controller_utils.go:1036] Caches are synced for endpoints config controller
I0319 00:37:47.855930       1 controller_utils.go:1036] Caches are synced for service config controller
==== END logs for container kube-proxy of pod kube-system/kube-proxy-xvjhl ====
==== START logs for container kube-scheduler of pod kube-system/kube-scheduler-minikube ====
I0319 00:37:32.234731       1 serving.go:319] Generated self-signed cert in-memory
W0319 00:37:32.428006       1 authentication.go:249] No authentication-kubeconfig provided in order to lookup client-ca-file in configmap/extension-apiserver-authentication in kube-system, so client certificate authentication won't work.
W0319 00:37:32.428181       1 authentication.go:252] No authentication-kubeconfig provided in order to lookup requestheader-client-ca-file in configmap/extension-apiserver-authentication in kube-system, so request-header client certificate authentication won't work.
W0319 00:37:32.428218       1 authorization.go:146] No authorization-kubeconfig provided, so SubjectAccessReview of authorization tokens won't work.
I0319 00:37:32.429955       1 server.go:142] Version: v1.15.4
I0319 00:37:32.430101       1 defaults.go:87] TaintNodesByCondition is enabled, PodToleratesNodeTaints predicate is mandatory
W0319 00:37:32.431938       1 authorization.go:47] Authorization is disabled
W0319 00:37:32.433433       1 authentication.go:55] Authentication is disabled
I0319 00:37:32.433569       1 deprecated_insecure_serving.go:51] Serving healthz insecurely on [::]:10251
I0319 00:37:32.434672       1 secure_serving.go:116] Serving securely on 127.0.0.1:10259
E0319 00:37:35.558976       1 reflector.go:125] k8s.io/kubernetes/cmd/kube-scheduler/app/server.go:226: Failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E0319 00:37:35.560510       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E0319 00:37:35.560687       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
E0319 00:37:35.560985       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E0319 00:37:35.561018       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E0319 00:37:35.569368       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1beta1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
E0319 00:37:35.571637       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
E0319 00:37:35.571762       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
E0319 00:37:35.572809       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
E0319 00:37:35.572910       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.ReplicaSet: replicasets.apps is forbidden: User "system:kube-scheduler" cannot list resource "replicasets" in API group "apps" at the cluster scope
E0319 00:37:36.559783       1 reflector.go:125] k8s.io/kubernetes/cmd/kube-scheduler/app/server.go:226: Failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E0319 00:37:36.561566       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E0319 00:37:36.562888       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
E0319 00:37:36.564305       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E0319 00:37:36.567832       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E0319 00:37:36.570849       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1beta1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
E0319 00:37:36.572830       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
E0319 00:37:36.577815       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
E0319 00:37:36.580257       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
E0319 00:37:36.580908       1 reflector.go:125] k8s.io/client-go/informers/factory.go:133: Failed to list *v1.ReplicaSet: replicasets.apps is forbidden: User "system:kube-scheduler" cannot list resource "replicasets" in API group "apps" at the cluster scope
I0319 00:37:38.440474       1 leaderelection.go:235] attempting to acquire leader lease  kube-system/kube-scheduler...
I0319 00:37:38.449223       1 leaderelection.go:245] successfully acquired lease kube-system/kube-scheduler
E0319 00:37:41.480318       1 factory.go:702] pod is already present in the activeQ
==== END logs for container kube-scheduler of pod kube-system/kube-scheduler-minikube ====
==== START logs for container storage-provisioner of pod kube-system/storage-provisioner ====
==== END logs for container storage-provisioner of pod kube-system/storage-provisioner ====
==== START logs for container tiller of pod kube-system/tiller-deploy-7bf78cdbf7-tbfkj ====
[main] 2020/03/19 00:41:32 Starting Tiller v2.14.1 (tls=false)
[main] 2020/03/19 00:41:32 GRPC listening on :44134
[main] 2020/03/19 00:41:32 Probes listening on :44135
[main] 2020/03/19 00:41:32 Storage driver is ConfigMap
[main] 2020/03/19 00:41:32 Max history per release is 0
[tiller] 2020/03/19 00:41:42 getting history for release flux-local
[storage] 2020/03/19 00:41:42 getting release history for "flux-local"
[tiller] 2020/03/19 00:41:42 preparing install for flux-local
[storage] 2020/03/19 00:41:42 getting release history for "flux-local"
[tiller] 2020/03/19 00:41:42 rendering flux chart using values
2020/03/19 00:41:42 info: manifest "flux/templates/psp.yaml" is empty. Skipping.
2020/03/19 00:41:42 info: manifest "flux/templates/helm-operator-crd.yaml" is empty. Skipping.
2020/03/19 00:41:42 info: manifest "flux/templates/gitconfig.yaml" is empty. Skipping.
2020/03/19 00:41:42 info: manifest "flux/templates/rbac-role.yaml" is empty. Skipping.
2020/03/19 00:41:42 info: manifest "flux/templates/helm-tls.yaml" is empty. Skipping.
2020/03/19 00:41:42 info: manifest "flux/templates/flux-helm-repositories.yaml" is empty. Skipping.
2020/03/19 00:41:42 info: manifest "flux/templates/secret.yaml" is empty. Skipping.
[tiller] 2020/03/19 00:41:42 performing install for flux-local
[tiller] 2020/03/19 00:41:42 executing 0 crd-install hooks for flux-local
[tiller] 2020/03/19 00:41:42 hooks complete for crd-install flux-local
[tiller] 2020/03/19 00:41:42 executing 0 pre-install hooks for flux-local
[tiller] 2020/03/19 00:41:42 hooks complete for pre-install flux-local
[storage] 2020/03/19 00:41:42 getting release history for "flux-local"
[storage] 2020/03/19 00:41:42 creating release "flux-local.v1"
[kube] 2020/03/19 00:41:42 building resources from manifest
[kube] 2020/03/19 00:41:42 creating 10 resource(s)
[tiller] 2020/03/19 00:41:42 executing 0 post-install hooks for flux-local
[tiller] 2020/03/19 00:41:42 hooks complete for post-install flux-local
[storage] 2020/03/19 00:41:42 updating release "flux-local.v1"
[storage] 2020/03/19 00:41:42 getting last revision of "flux-local"
[storage] 2020/03/19 00:41:42 getting release history for "flux-local"
[kube] 2020/03/19 00:41:42 Doing get for ConfigMap: "flux-local-kube-config"
[kube] 2020/03/19 00:41:42 get relation pod of object: default/ConfigMap/flux-local-kube-config
[kube] 2020/03/19 00:41:42 Doing get for ConfigMap: "flux-local-ssh-config"
[kube] 2020/03/19 00:41:42 get relation pod of object: default/ConfigMap/flux-local-ssh-config
[kube] 2020/03/19 00:41:42 Doing get for ServiceAccount: "flux-local"
[kube] 2020/03/19 00:41:42 get relation pod of object: default/ServiceAccount/flux-local
[kube] 2020/03/19 00:41:42 Doing get for ClusterRole: "flux-local"
[kube] 2020/03/19 00:41:42 get relation pod of object: /ClusterRole/flux-local
[kube] 2020/03/19 00:41:42 Doing get for ClusterRoleBinding: "flux-local"
[kube] 2020/03/19 00:41:42 get relation pod of object: /ClusterRoleBinding/flux-local
[kube] 2020/03/19 00:41:42 Doing get for Service: "flux-local-memcached"
[kube] 2020/03/19 00:41:42 get relation pod of object: default/Service/flux-local-memcached
[kube] 2020/03/19 00:41:42 Doing get for Service: "flux-local"
[kube] 2020/03/19 00:41:42 get relation pod of object: default/Service/flux-local
[kube] 2020/03/19 00:41:42 Doing get for Deployment: "flux-local"
[kube] 2020/03/19 00:41:42 get relation pod of object: default/Deployment/flux-local
[kube] 2020/03/19 00:41:42 Doing get for Deployment: "flux-local-helm-operator"
[kube] 2020/03/19 00:41:42 get relation pod of object: default/Deployment/flux-local-helm-operator
[kube] 2020/03/19 00:41:42 Doing get for Deployment: "flux-local-memcached"
[kube] 2020/03/19 00:41:42 get relation pod of object: default/Deployment/flux-local-memcached
==== END logs for container tiller of pod kube-system/tiller-deploy-7bf78cdbf7-tbfkj ====
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/events",
        "resourceVersion": "1100"
    },
    "items": [
        {
            "metadata": {
                "name": "flux-local-7964ff9f7b-5rsjj.15fd8dc0b71dff39",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-7964ff9f7b-5rsjj.15fd8dc0b71dff39",
                "uid": "cc8294dd-ed2f-4cef-b069-b188ee20a8e4",
                "resourceVersion": "767",
                "creationTimestamp": "2020-03-19T00:41:42Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-7964ff9f7b-5rsjj",
                "uid": "6e1caffa-af96-4c10-8830-15ed2738e9ff",
                "apiVersion": "v1",
                "resourceVersion": "755"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned default/flux-local-7964ff9f7b-5rsjj to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-19T00:41:42Z",
            "lastTimestamp": "2020-03-19T00:41:42Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-7964ff9f7b-5rsjj.15fd8dc0de67cb9a",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-7964ff9f7b-5rsjj.15fd8dc0de67cb9a",
                "uid": "8b8983ba-7b93-40b7-9bea-e80b894b5cee",
                "resourceVersion": "788",
                "creationTimestamp": "2020-03-19T00:41:43Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-7964ff9f7b-5rsjj",
                "uid": "6e1caffa-af96-4c10-8830-15ed2738e9ff",
                "apiVersion": "v1",
                "resourceVersion": "758",
                "fieldPath": "spec.containers{flux}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"docker.io/fluxcd/flux:1.15.0\"",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:41:43Z",
            "lastTimestamp": "2020-03-19T00:41:43Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-7964ff9f7b-5rsjj.15fd8dca20ace008",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-7964ff9f7b-5rsjj.15fd8dca20ace008",
                "uid": "18547b4d-ec04-4111-a9ed-84b9d96e3a11",
                "resourceVersion": "845",
                "creationTimestamp": "2020-03-19T00:42:23Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-7964ff9f7b-5rsjj",
                "uid": "6e1caffa-af96-4c10-8830-15ed2738e9ff",
                "apiVersion": "v1",
                "resourceVersion": "758",
                "fieldPath": "spec.containers{flux}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"docker.io/fluxcd/flux:1.15.0\"",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:42:23Z",
            "lastTimestamp": "2020-03-19T00:42:23Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-7964ff9f7b-5rsjj.15fd8dca2b14b3d0",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-7964ff9f7b-5rsjj.15fd8dca2b14b3d0",
                "uid": "41294eef-2609-43b8-9d60-0c3c58a66537",
                "resourceVersion": "846",
                "creationTimestamp": "2020-03-19T00:42:23Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-7964ff9f7b-5rsjj",
                "uid": "6e1caffa-af96-4c10-8830-15ed2738e9ff",
                "apiVersion": "v1",
                "resourceVersion": "758",
                "fieldPath": "spec.containers{flux}"
            },
            "reason": "Created",
            "message": "Created container flux",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:42:23Z",
            "lastTimestamp": "2020-03-19T00:42:23Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-7964ff9f7b-5rsjj.15fd8dca33897459",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-7964ff9f7b-5rsjj.15fd8dca33897459",
                "uid": "45a149ef-72f0-4ec3-85c2-277a277abbe7",
                "resourceVersion": "847",
                "creationTimestamp": "2020-03-19T00:42:23Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-7964ff9f7b-5rsjj",
                "uid": "6e1caffa-af96-4c10-8830-15ed2738e9ff",
                "apiVersion": "v1",
                "resourceVersion": "758",
                "fieldPath": "spec.containers{flux}"
            },
            "reason": "Started",
            "message": "Started container flux",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:42:23Z",
            "lastTimestamp": "2020-03-19T00:42:23Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-7964ff9f7b.15fd8dc0b398d4f1",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-7964ff9f7b.15fd8dc0b398d4f1",
                "uid": "55f2a11a-ad34-4a4b-8f09-e30a83dd0347",
                "resourceVersion": "761",
                "creationTimestamp": "2020-03-19T00:41:42Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "default",
                "name": "flux-local-7964ff9f7b",
                "uid": "e9605e6b-b434-4bc8-8c2a-5e950c861150",
                "apiVersion": "apps/v1",
                "resourceVersion": "749"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: flux-local-7964ff9f7b-5rsjj",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-19T00:41:42Z",
            "lastTimestamp": "2020-03-19T00:41:42Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-helm-operator-76c9b48b9c-glvl6.15fd8dc0b9027ca9",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-helm-operator-76c9b48b9c-glvl6.15fd8dc0b9027ca9",
                "uid": "d7de3be9-64c2-4c03-b1ae-1d0794b60823",
                "resourceVersion": "775",
                "creationTimestamp": "2020-03-19T00:41:42Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-helm-operator-76c9b48b9c-glvl6",
                "uid": "9b5e6524-59e2-477a-ad1e-fa8f610c7659",
                "apiVersion": "v1",
                "resourceVersion": "756"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned default/flux-local-helm-operator-76c9b48b9c-glvl6 to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-19T00:41:42Z",
            "lastTimestamp": "2020-03-19T00:41:42Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-helm-operator-76c9b48b9c-glvl6.15fd8dc0dc6ea503",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-helm-operator-76c9b48b9c-glvl6.15fd8dc0dc6ea503",
                "uid": "20b609d7-ad86-4ac0-845e-e00f07570f1a",
                "resourceVersion": "787",
                "creationTimestamp": "2020-03-19T00:41:43Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-helm-operator-76c9b48b9c-glvl6",
                "uid": "9b5e6524-59e2-477a-ad1e-fa8f610c7659",
                "apiVersion": "v1",
                "resourceVersion": "763",
                "fieldPath": "spec.containers{flux-helm-operator}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"docker.io/fluxcd/helm-operator:0.10.1\"",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:41:43Z",
            "lastTimestamp": "2020-03-19T00:41:43Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-helm-operator-76c9b48b9c-glvl6.15fd8dc59fb0633f",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-helm-operator-76c9b48b9c-glvl6.15fd8dc59fb0633f",
                "uid": "f0519504-6060-4075-a3bf-7da2fcb7997f",
                "resourceVersion": "814",
                "creationTimestamp": "2020-03-19T00:42:03Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-helm-operator-76c9b48b9c-glvl6",
                "uid": "9b5e6524-59e2-477a-ad1e-fa8f610c7659",
                "apiVersion": "v1",
                "resourceVersion": "763",
                "fieldPath": "spec.containers{flux-helm-operator}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"docker.io/fluxcd/helm-operator:0.10.1\"",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:42:03Z",
            "lastTimestamp": "2020-03-19T00:42:03Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-helm-operator-76c9b48b9c-glvl6.15fd8dc5aa209192",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-helm-operator-76c9b48b9c-glvl6.15fd8dc5aa209192",
                "uid": "3064bc27-1517-48c1-afb5-7641c15263bc",
                "resourceVersion": "815",
                "creationTimestamp": "2020-03-19T00:42:04Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-helm-operator-76c9b48b9c-glvl6",
                "uid": "9b5e6524-59e2-477a-ad1e-fa8f610c7659",
                "apiVersion": "v1",
                "resourceVersion": "763",
                "fieldPath": "spec.containers{flux-helm-operator}"
            },
            "reason": "Created",
            "message": "Created container flux-helm-operator",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:42:04Z",
            "lastTimestamp": "2020-03-19T00:42:04Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-helm-operator-76c9b48b9c-glvl6.15fd8dc5b010b59c",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-helm-operator-76c9b48b9c-glvl6.15fd8dc5b010b59c",
                "uid": "8ea98bee-491f-4efc-9c26-2c48e0456140",
                "resourceVersion": "816",
                "creationTimestamp": "2020-03-19T00:42:04Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-helm-operator-76c9b48b9c-glvl6",
                "uid": "9b5e6524-59e2-477a-ad1e-fa8f610c7659",
                "apiVersion": "v1",
                "resourceVersion": "763",
                "fieldPath": "spec.containers{flux-helm-operator}"
            },
            "reason": "Started",
            "message": "Started container flux-helm-operator",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:42:04Z",
            "lastTimestamp": "2020-03-19T00:42:04Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-helm-operator-76c9b48b9c.15fd8dc0b7171a21",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-helm-operator-76c9b48b9c.15fd8dc0b7171a21",
                "uid": "4ac88f5c-9823-48d7-8ce6-a66ba3fbd4f4",
                "resourceVersion": "768",
                "creationTimestamp": "2020-03-19T00:41:42Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "default",
                "name": "flux-local-helm-operator-76c9b48b9c",
                "uid": "cfb742df-853a-4f03-bc3a-56f87927994d",
                "apiVersion": "apps/v1",
                "resourceVersion": "751"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: flux-local-helm-operator-76c9b48b9c-glvl6",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-19T00:41:42Z",
            "lastTimestamp": "2020-03-19T00:41:42Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-helm-operator.15fd8dc0b3b4e38f",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-helm-operator.15fd8dc0b3b4e38f",
                "uid": "c1b81ea2-fda5-47cb-b7ec-1e90df08b4dd",
                "resourceVersion": "762",
                "creationTimestamp": "2020-03-19T00:41:42Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "default",
                "name": "flux-local-helm-operator",
                "uid": "0ae0b6b7-c129-415e-99d5-69bcf3b978bd",
                "apiVersion": "apps/v1",
                "resourceVersion": "750"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set flux-local-helm-operator-76c9b48b9c to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-19T00:41:42Z",
            "lastTimestamp": "2020-03-19T00:41:42Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-memcached-6c5d47fc8c-szhqj.15fd8dc0bd455716",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-memcached-6c5d47fc8c-szhqj.15fd8dc0bd455716",
                "uid": "6e2b7e19-e4c1-4a07-90c8-e8fafe420c60",
                "resourceVersion": "783",
                "creationTimestamp": "2020-03-19T00:41:42Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-memcached-6c5d47fc8c-szhqj",
                "uid": "a4009316-2bd6-4658-bfeb-b13825d0cf3c",
                "apiVersion": "v1",
                "resourceVersion": "771"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned default/flux-local-memcached-6c5d47fc8c-szhqj to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-19T00:41:42Z",
            "lastTimestamp": "2020-03-19T00:41:42Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-memcached-6c5d47fc8c-szhqj.15fd8dc11609473c",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-memcached-6c5d47fc8c-szhqj.15fd8dc11609473c",
                "uid": "7799fbbc-e64a-4ea5-9e4e-f3bf30de81c4",
                "resourceVersion": "790",
                "creationTimestamp": "2020-03-19T00:41:44Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-memcached-6c5d47fc8c-szhqj",
                "uid": "a4009316-2bd6-4658-bfeb-b13825d0cf3c",
                "apiVersion": "v1",
                "resourceVersion": "778",
                "fieldPath": "spec.containers{memcached}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"memcached:1.5.15\"",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:41:44Z",
            "lastTimestamp": "2020-03-19T00:41:44Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-memcached-6c5d47fc8c-szhqj.15fd8dcfd419c75b",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-memcached-6c5d47fc8c-szhqj.15fd8dcfd419c75b",
                "uid": "d399e3d0-b8e4-4f72-a2ad-f4f4097eacab",
                "resourceVersion": "885",
                "creationTimestamp": "2020-03-19T00:42:47Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-memcached-6c5d47fc8c-szhqj",
                "uid": "a4009316-2bd6-4658-bfeb-b13825d0cf3c",
                "apiVersion": "v1",
                "resourceVersion": "778",
                "fieldPath": "spec.containers{memcached}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"memcached:1.5.15\"",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:42:47Z",
            "lastTimestamp": "2020-03-19T00:42:47Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-memcached-6c5d47fc8c-szhqj.15fd8dcfd9d8a512",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-memcached-6c5d47fc8c-szhqj.15fd8dcfd9d8a512",
                "uid": "02fe0c04-1b7a-498d-b95a-a52e0738ee03",
                "resourceVersion": "886",
                "creationTimestamp": "2020-03-19T00:42:47Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-memcached-6c5d47fc8c-szhqj",
                "uid": "a4009316-2bd6-4658-bfeb-b13825d0cf3c",
                "apiVersion": "v1",
                "resourceVersion": "778",
                "fieldPath": "spec.containers{memcached}"
            },
            "reason": "Created",
            "message": "Created container memcached",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:42:47Z",
            "lastTimestamp": "2020-03-19T00:42:47Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-memcached-6c5d47fc8c-szhqj.15fd8dcfe0ad99e5",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-memcached-6c5d47fc8c-szhqj.15fd8dcfe0ad99e5",
                "uid": "a1b31c74-41c1-4d78-ab88-3361a34e0293",
                "resourceVersion": "887",
                "creationTimestamp": "2020-03-19T00:42:47Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "flux-local-memcached-6c5d47fc8c-szhqj",
                "uid": "a4009316-2bd6-4658-bfeb-b13825d0cf3c",
                "apiVersion": "v1",
                "resourceVersion": "778",
                "fieldPath": "spec.containers{memcached}"
            },
            "reason": "Started",
            "message": "Started container memcached",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:42:47Z",
            "lastTimestamp": "2020-03-19T00:42:47Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-memcached-6c5d47fc8c.15fd8dc0bb0386e6",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-memcached-6c5d47fc8c.15fd8dc0bb0386e6",
                "uid": "09876f5f-3bbd-4f54-b241-d063670cef0c",
                "resourceVersion": "776",
                "creationTimestamp": "2020-03-19T00:41:42Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "default",
                "name": "flux-local-memcached-6c5d47fc8c",
                "uid": "01125c5a-6894-4099-b683-896b794f04a1",
                "apiVersion": "apps/v1",
                "resourceVersion": "760"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: flux-local-memcached-6c5d47fc8c-szhqj",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-19T00:41:42Z",
            "lastTimestamp": "2020-03-19T00:41:42Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local-memcached.15fd8dc0b888fec3",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local-memcached.15fd8dc0b888fec3",
                "uid": "e834cd88-d879-4a04-892d-44a955484942",
                "resourceVersion": "769",
                "creationTimestamp": "2020-03-19T00:41:42Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "default",
                "name": "flux-local-memcached",
                "uid": "3ce41945-4d84-4070-8ad8-b5c0a00bf651",
                "apiVersion": "apps/v1",
                "resourceVersion": "754"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set flux-local-memcached-6c5d47fc8c to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-19T00:41:42Z",
            "lastTimestamp": "2020-03-19T00:41:42Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "flux-local.15fd8dc0b2c15031",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/flux-local.15fd8dc0b2c15031",
                "uid": "e4a6cfc7-7419-4bf5-a94c-efb773089e8e",
                "resourceVersion": "752",
                "creationTimestamp": "2020-03-19T00:41:42Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "default",
                "name": "flux-local",
                "uid": "410dbe31-a5b3-46cf-b737-06595a408006",
                "apiVersion": "apps/v1",
                "resourceVersion": "748"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set flux-local-7964ff9f7b to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-19T00:41:42Z",
            "lastTimestamp": "2020-03-19T00:41:42Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.15fd8d85ef6a3fe4",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.15fd8d85ef6a3fe4",
                "uid": "a220b829-d688-4ea2-b062-151fd4167523",
                "resourceVersion": "229",
                "creationTimestamp": "2020-03-19T00:37:38Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasSufficientMemory",
            "message": "Node minikube status is now: NodeHasSufficientMemory",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:30Z",
            "lastTimestamp": "2020-03-19T00:37:30Z",
            "count": 8,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.15fd8d85ef6ae59e",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.15fd8d85ef6ae59e",
                "uid": "499c156a-0c16-458a-9d0f-548d139ee2c6",
                "resourceVersion": "233",
                "creationTimestamp": "2020-03-19T00:37:39Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasNoDiskPressure",
            "message": "Node minikube status is now: NodeHasNoDiskPressure",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:30Z",
            "lastTimestamp": "2020-03-19T00:37:30Z",
            "count": 8,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.15fd8d85ef6b0cb1",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.15fd8d85ef6b0cb1",
                "uid": "f206e71e-04eb-4db4-aeb6-5fe1d6759d0c",
                "resourceVersion": "220",
                "creationTimestamp": "2020-03-19T00:37:39Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasSufficientPID",
            "message": "Node minikube status is now: NodeHasSufficientPID",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:30Z",
            "lastTimestamp": "2020-03-19T00:37:30Z",
            "count": 7,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.15fd8d898e8b2702",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.15fd8d898e8b2702",
                "uid": "d620864b-b75b-4a0a-abb9-40d19d227b08",
                "resourceVersion": "326",
                "creationTimestamp": "2020-03-19T00:37:45Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "17d30152-4bd6-4d7d-87d4-040085d043ad"
            },
            "reason": "RegisteredNode",
            "message": "Node minikube event: Registered Node minikube in Controller",
            "source": {
                "component": "node-controller"
            },
            "firstTimestamp": "2020-03-19T00:37:45Z",
            "lastTimestamp": "2020-03-19T00:37:45Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.15fd8d8a00575a41",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.15fd8d8a00575a41",
                "uid": "b3462ce3-4c9c-4301-9acf-a5aa39c0d2ee",
                "resourceVersion": "377",
                "creationTimestamp": "2020-03-19T00:37:47Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "Starting",
            "message": "Starting kube-proxy.",
            "source": {
                "component": "kube-proxy",
                "host": "minikube"
            },
            "firstTimestamp": "2020-03-19T00:37:47Z",
            "lastTimestamp": "2020-03-19T00:37:47Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        }
    ]
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/replicationcontrollers",
        "resourceVersion": "1100"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/services",
        "resourceVersion": "1100"
    },
    "items": [
        {
            "metadata": {
                "name": "flux-local",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/services/flux-local",
                "uid": "fb247751-fc76-4f0d-b7b5-ef29d94c6b08",
                "resourceVersion": "746",
                "creationTimestamp": "2020-03-19T00:41:42Z",
                "labels": {
                    "app": "flux",
                    "chart": "flux-0.15.0",
                    "heritage": "Tiller",
                    "release": "flux-local"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "http",
                        "protocol": "TCP",
                        "port": 3030,
                        "targetPort": "http"
                    }
                ],
                "selector": {
                    "app": "flux",
                    "release": "flux-local"
                },
                "clusterIP": "10.100.182.204",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "metadata": {
                "name": "flux-local-memcached",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/services/flux-local-memcached",
                "uid": "a3670b95-d811-4543-880f-7ac5d8d69f2b",
                "resourceVersion": "743",
                "creationTimestamp": "2020-03-19T00:41:42Z",
                "labels": {
                    "app": "flux-memcached",
                    "chart": "flux-0.15.0",
                    "heritage": "Tiller",
                    "release": "flux-local"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "memcached",
                        "protocol": "TCP",
                        "port": 11211,
                        "targetPort": "memcached"
                    }
                ],
                "selector": {
                    "app": "flux-memcached",
                    "release": "flux-local"
                },
                "clusterIP": "10.103.129.118",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "metadata": {
                "name": "kubernetes",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/services/kubernetes",
                "uid": "febe11e1-b24f-4fdc-9754-f2c52c164f95",
                "resourceVersion": "153",
                "creationTimestamp": "2020-03-19T00:37:38Z",
                "labels": {
                    "component": "apiserver",
                    "provider": "kubernetes"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "https",
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": 8443
                    }
                ],
                "clusterIP": "10.96.0.1",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/daemonsets",
        "resourceVersion": "1100"
    },
    "items": []
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/deployments",
        "resourceVersion": "1100"
    },
    "items": [
        {
            "metadata": {
                "name": "flux-local",
                "namespace": "default",
                "selfLink": "/apis/apps/v1/namespaces/default/deployments/flux-local",
                "uid": "410dbe31-a5b3-46cf-b737-06595a408006",
                "resourceVersion": "863",
                "generation": 1,
                "creationTimestamp": "2020-03-19T00:41:42Z",
                "labels": {
                    "app": "flux",
                    "chart": "flux-0.15.0",
                    "heritage": "Tiller",
                    "release": "flux-local"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "app": "flux",
                        "release": "flux-local"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "flux",
                            "release": "flux-local"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "kubedir",
                                "configMap": {
                                    "name": "flux-local-kube-config",
                                    "defaultMode": 420
                                }
                            },
                            {
                                "name": "sshdir",
                                "configMap": {
                                    "name": "flux-local-ssh-config",
                                    "defaultMode": 384
                                }
                            },
                            {
                                "name": "git-key",
                                "secret": {
                                    "secretName": "git-auth-local",
                                    "defaultMode": 256
                                }
                            },
                            {
                                "name": "git-keygen",
                                "emptyDir": {
                                    "medium": "Memory"
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "flux",
                                "image": "docker.io/fluxcd/flux:1.15.0",
                                "args": [
                                    "--log-format=fmt",
                                    "--ssh-keygen-dir=/var/fluxd/keygen",
                                    "--k8s-secret-name=git-auth-local",
                                    "--memcached-hostname=flux-local-memcached",
                                    "--sync-state=git",
                                    "--memcached-service=",
                                    "--git-url=git@github.com:craig8/blockchain-automation-framework",
                                    "--git-branch=local",
                                    "--git-path=platforms/hyperledger-fabric/releases/dev",
                                    "--git-readonly=false",
                                    "--git-user=Weave Flux",
                                    "--git-email=support@weave.works",
                                    "--git-set-author=false",
                                    "--git-poll-interval=2m",
                                    "--git-timeout=200s",
                                    "--sync-interval=2m",
                                    "--git-ci-skip=false",
                                    "--git-label=sync-local",
                                    "--registry-poll-interval=5m",
                                    "--registry-rps=200",
                                    "--registry-burst=125",
                                    "--registry-trace=false",
                                    "--registry-insecure-host=index.docker.io/hyperledgerlabs"
                                ],
                                "ports": [
                                    {
                                        "name": "http",
                                        "containerPort": 3030,
                                        "protocol": "TCP"
                                    }
                                ],
                                "env": [
                                    {
                                        "name": "KUBECONFIG",
                                        "value": "/root/.kubectl/config"
                                    }
                                ],
                                "resources": {
                                    "requests": {
                                        "cpu": "50m",
                                        "memory": "64Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "kubedir",
                                        "mountPath": "/root/.kubectl"
                                    },
                                    {
                                        "name": "sshdir",
                                        "readOnly": true,
                                        "mountPath": "/root/.ssh"
                                    },
                                    {
                                        "name": "git-key",
                                        "readOnly": true,
                                        "mountPath": "/etc/fluxd/ssh"
                                    },
                                    {
                                        "name": "git-keygen",
                                        "mountPath": "/var/fluxd/keygen"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/api/flux/v6/identity.pub",
                                        "port": 3030,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/api/flux/v6/identity.pub",
                                        "port": 3030,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "flux-local",
                        "serviceAccount": "flux-local",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": "25%",
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-03-19T00:42:31Z",
                        "lastTransitionTime": "2020-03-19T00:42:31Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-03-19T00:42:31Z",
                        "lastTransitionTime": "2020-03-19T00:41:42Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"flux-local-7964ff9f7b\" has successfully progressed."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "flux-local-helm-operator",
                "namespace": "default",
                "selfLink": "/apis/apps/v1/namespaces/default/deployments/flux-local-helm-operator",
                "uid": "0ae0b6b7-c129-415e-99d5-69bcf3b978bd",
                "resourceVersion": "820",
                "generation": 1,
                "creationTimestamp": "2020-03-19T00:41:42Z",
                "labels": {
                    "app": "flux-helm-operator",
                    "chart": "flux-0.15.0",
                    "heritage": "Tiller",
                    "release": "flux-local"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "app": "flux-helm-operator",
                        "release": "flux-local"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "flux-helm-operator",
                            "release": "flux-local"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "sshdir",
                                "configMap": {
                                    "name": "flux-local-ssh-config",
                                    "defaultMode": 384
                                }
                            },
                            {
                                "name": "git-key",
                                "secret": {
                                    "secretName": "git-auth-local",
                                    "defaultMode": 256
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "flux-helm-operator",
                                "image": "docker.io/fluxcd/helm-operator:0.10.1",
                                "args": [
                                    "--log-format=fmt",
                                    "--git-timeout=200s",
                                    "--git-poll-interval=2m",
                                    "--charts-sync-interval=3m",
                                    "--update-chart-deps=true",
                                    "--log-release-diffs=false",
                                    "--tiller-namespace=kube-system"
                                ],
                                "ports": [
                                    {
                                        "name": "http",
                                        "containerPort": 3030,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "requests": {
                                        "cpu": "50m",
                                        "memory": "64Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "sshdir",
                                        "readOnly": true,
                                        "mountPath": "/root/.ssh/known_hosts",
                                        "subPath": "known_hosts"
                                    },
                                    {
                                        "name": "git-key",
                                        "readOnly": true,
                                        "mountPath": "/etc/fluxd/ssh"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "flux-local",
                        "serviceAccount": "flux-local",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": "25%",
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-03-19T00:42:04Z",
                        "lastTransitionTime": "2020-03-19T00:42:04Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-03-19T00:42:04Z",
                        "lastTransitionTime": "2020-03-19T00:41:42Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"flux-local-helm-operator-76c9b48b9c\" has successfully progressed."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "flux-local-memcached",
                "namespace": "default",
                "selfLink": "/apis/apps/v1/namespaces/default/deployments/flux-local-memcached",
                "uid": "3ce41945-4d84-4070-8ad8-b5c0a00bf651",
                "resourceVersion": "891",
                "generation": 1,
                "creationTimestamp": "2020-03-19T00:41:42Z",
                "labels": {
                    "app": "flux-memcached",
                    "chart": "flux-0.15.0",
                    "heritage": "Tiller",
                    "release": "flux-local"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "app": "flux-memcached",
                        "release": "flux-local"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "flux-memcached",
                            "release": "flux-local"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "memcached",
                                "image": "memcached:1.5.15",
                                "args": [
                                    "-m 512",
                                    "-p 11211",
                                    "-I 5m"
                                ],
                                "ports": [
                                    {
                                        "name": "memcached",
                                        "containerPort": 11211,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "runAsUser": 11211,
                                    "runAsGroup": 11211,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                },
                "strategy": {
                    "type": "Recreate"
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-03-19T00:42:48Z",
                        "lastTransitionTime": "2020-03-19T00:42:48Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-03-19T00:42:48Z",
                        "lastTransitionTime": "2020-03-19T00:41:42Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"flux-local-memcached-6c5d47fc8c\" has successfully progressed."
                    }
                ]
            }
        }
    ]
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/replicasets",
        "resourceVersion": "1100"
    },
    "items": [
        {
            "metadata": {
                "name": "flux-local-7964ff9f7b",
                "namespace": "default",
                "selfLink": "/apis/apps/v1/namespaces/default/replicasets/flux-local-7964ff9f7b",
                "uid": "e9605e6b-b434-4bc8-8c2a-5e950c861150",
                "resourceVersion": "861",
                "generation": 1,
                "creationTimestamp": "2020-03-19T00:41:42Z",
                "labels": {
                    "app": "flux",
                    "pod-template-hash": "7964ff9f7b",
                    "release": "flux-local"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "flux-local",
                        "uid": "410dbe31-a5b3-46cf-b737-06595a408006",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "app": "flux",
                        "pod-template-hash": "7964ff9f7b",
                        "release": "flux-local"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "flux",
                            "pod-template-hash": "7964ff9f7b",
                            "release": "flux-local"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "kubedir",
                                "configMap": {
                                    "name": "flux-local-kube-config",
                                    "defaultMode": 420
                                }
                            },
                            {
                                "name": "sshdir",
                                "configMap": {
                                    "name": "flux-local-ssh-config",
                                    "defaultMode": 384
                                }
                            },
                            {
                                "name": "git-key",
                                "secret": {
                                    "secretName": "git-auth-local",
                                    "defaultMode": 256
                                }
                            },
                            {
                                "name": "git-keygen",
                                "emptyDir": {
                                    "medium": "Memory"
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "flux",
                                "image": "docker.io/fluxcd/flux:1.15.0",
                                "args": [
                                    "--log-format=fmt",
                                    "--ssh-keygen-dir=/var/fluxd/keygen",
                                    "--k8s-secret-name=git-auth-local",
                                    "--memcached-hostname=flux-local-memcached",
                                    "--sync-state=git",
                                    "--memcached-service=",
                                    "--git-url=git@github.com:craig8/blockchain-automation-framework",
                                    "--git-branch=local",
                                    "--git-path=platforms/hyperledger-fabric/releases/dev",
                                    "--git-readonly=false",
                                    "--git-user=Weave Flux",
                                    "--git-email=support@weave.works",
                                    "--git-set-author=false",
                                    "--git-poll-interval=2m",
                                    "--git-timeout=200s",
                                    "--sync-interval=2m",
                                    "--git-ci-skip=false",
                                    "--git-label=sync-local",
                                    "--registry-poll-interval=5m",
                                    "--registry-rps=200",
                                    "--registry-burst=125",
                                    "--registry-trace=false",
                                    "--registry-insecure-host=index.docker.io/hyperledgerlabs"
                                ],
                                "ports": [
                                    {
                                        "name": "http",
                                        "containerPort": 3030,
                                        "protocol": "TCP"
                                    }
                                ],
                                "env": [
                                    {
                                        "name": "KUBECONFIG",
                                        "value": "/root/.kubectl/config"
                                    }
                                ],
                                "resources": {
                                    "requests": {
                                        "cpu": "50m",
                                        "memory": "64Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "kubedir",
                                        "mountPath": "/root/.kubectl"
                                    },
                                    {
                                        "name": "sshdir",
                                        "readOnly": true,
                                        "mountPath": "/root/.ssh"
                                    },
                                    {
                                        "name": "git-key",
                                        "readOnly": true,
                                        "mountPath": "/etc/fluxd/ssh"
                                    },
                                    {
                                        "name": "git-keygen",
                                        "mountPath": "/var/fluxd/keygen"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/api/flux/v6/identity.pub",
                                        "port": 3030,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/api/flux/v6/identity.pub",
                                        "port": 3030,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 5,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "flux-local",
                        "serviceAccount": "flux-local",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "flux-local-helm-operator-76c9b48b9c",
                "namespace": "default",
                "selfLink": "/apis/apps/v1/namespaces/default/replicasets/flux-local-helm-operator-76c9b48b9c",
                "uid": "cfb742df-853a-4f03-bc3a-56f87927994d",
                "resourceVersion": "819",
                "generation": 1,
                "creationTimestamp": "2020-03-19T00:41:42Z",
                "labels": {
                    "app": "flux-helm-operator",
                    "pod-template-hash": "76c9b48b9c",
                    "release": "flux-local"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "flux-local-helm-operator",
                        "uid": "0ae0b6b7-c129-415e-99d5-69bcf3b978bd",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "app": "flux-helm-operator",
                        "pod-template-hash": "76c9b48b9c",
                        "release": "flux-local"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "flux-helm-operator",
                            "pod-template-hash": "76c9b48b9c",
                            "release": "flux-local"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "sshdir",
                                "configMap": {
                                    "name": "flux-local-ssh-config",
                                    "defaultMode": 384
                                }
                            },
                            {
                                "name": "git-key",
                                "secret": {
                                    "secretName": "git-auth-local",
                                    "defaultMode": 256
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "flux-helm-operator",
                                "image": "docker.io/fluxcd/helm-operator:0.10.1",
                                "args": [
                                    "--log-format=fmt",
                                    "--git-timeout=200s",
                                    "--git-poll-interval=2m",
                                    "--charts-sync-interval=3m",
                                    "--update-chart-deps=true",
                                    "--log-release-diffs=false",
                                    "--tiller-namespace=kube-system"
                                ],
                                "ports": [
                                    {
                                        "name": "http",
                                        "containerPort": 3030,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "requests": {
                                        "cpu": "50m",
                                        "memory": "64Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "sshdir",
                                        "readOnly": true,
                                        "mountPath": "/root/.ssh/known_hosts",
                                        "subPath": "known_hosts"
                                    },
                                    {
                                        "name": "git-key",
                                        "readOnly": true,
                                        "mountPath": "/etc/fluxd/ssh"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "flux-local",
                        "serviceAccount": "flux-local",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "flux-local-memcached-6c5d47fc8c",
                "namespace": "default",
                "selfLink": "/apis/apps/v1/namespaces/default/replicasets/flux-local-memcached-6c5d47fc8c",
                "uid": "01125c5a-6894-4099-b683-896b794f04a1",
                "resourceVersion": "890",
                "generation": 1,
                "creationTimestamp": "2020-03-19T00:41:42Z",
                "labels": {
                    "app": "flux-memcached",
                    "pod-template-hash": "6c5d47fc8c",
                    "release": "flux-local"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "1",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "flux-local-memcached",
                        "uid": "3ce41945-4d84-4070-8ad8-b5c0a00bf651",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "app": "flux-memcached",
                        "pod-template-hash": "6c5d47fc8c",
                        "release": "flux-local"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "flux-memcached",
                            "pod-template-hash": "6c5d47fc8c",
                            "release": "flux-local"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "memcached",
                                "image": "memcached:1.5.15",
                                "args": [
                                    "-m 512",
                                    "-p 11211",
                                    "-I 5m"
                                ],
                                "ports": [
                                    {
                                        "name": "memcached",
                                        "containerPort": 11211,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "runAsUser": 11211,
                                    "runAsGroup": 11211,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        }
    ]
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/pods",
        "resourceVersion": "1100"
    },
    "items": [
        {
            "metadata": {
                "name": "flux-local-7964ff9f7b-5rsjj",
                "generateName": "flux-local-7964ff9f7b-",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/pods/flux-local-7964ff9f7b-5rsjj",
                "uid": "6e1caffa-af96-4c10-8830-15ed2738e9ff",
                "resourceVersion": "860",
                "creationTimestamp": "2020-03-19T00:41:42Z",
                "labels": {
                    "app": "flux",
                    "pod-template-hash": "7964ff9f7b",
                    "release": "flux-local"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "flux-local-7964ff9f7b",
                        "uid": "e9605e6b-b434-4bc8-8c2a-5e950c861150",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kubedir",
                        "configMap": {
                            "name": "flux-local-kube-config",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "sshdir",
                        "configMap": {
                            "name": "flux-local-ssh-config",
                            "defaultMode": 384
                        }
                    },
                    {
                        "name": "git-key",
                        "secret": {
                            "secretName": "git-auth-local",
                            "defaultMode": 256
                        }
                    },
                    {
                        "name": "git-keygen",
                        "emptyDir": {
                            "medium": "Memory"
                        }
                    },
                    {
                        "name": "flux-local-token-mjdmh",
                        "secret": {
                            "secretName": "flux-local-token-mjdmh",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "flux",
                        "image": "docker.io/fluxcd/flux:1.15.0",
                        "args": [
                            "--log-format=fmt",
                            "--ssh-keygen-dir=/var/fluxd/keygen",
                            "--k8s-secret-name=git-auth-local",
                            "--memcached-hostname=flux-local-memcached",
                            "--sync-state=git",
                            "--memcached-service=",
                            "--git-url=git@github.com:craig8/blockchain-automation-framework",
                            "--git-branch=local",
                            "--git-path=platforms/hyperledger-fabric/releases/dev",
                            "--git-readonly=false",
                            "--git-user=Weave Flux",
                            "--git-email=support@weave.works",
                            "--git-set-author=false",
                            "--git-poll-interval=2m",
                            "--git-timeout=200s",
                            "--sync-interval=2m",
                            "--git-ci-skip=false",
                            "--git-label=sync-local",
                            "--registry-poll-interval=5m",
                            "--registry-rps=200",
                            "--registry-burst=125",
                            "--registry-trace=false",
                            "--registry-insecure-host=index.docker.io/hyperledgerlabs"
                        ],
                        "ports": [
                            {
                                "name": "http",
                                "containerPort": 3030,
                                "protocol": "TCP"
                            }
                        ],
                        "env": [
                            {
                                "name": "KUBECONFIG",
                                "value": "/root/.kubectl/config"
                            }
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "50m",
                                "memory": "64Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kubedir",
                                "mountPath": "/root/.kubectl"
                            },
                            {
                                "name": "sshdir",
                                "readOnly": true,
                                "mountPath": "/root/.ssh"
                            },
                            {
                                "name": "git-key",
                                "readOnly": true,
                                "mountPath": "/etc/fluxd/ssh"
                            },
                            {
                                "name": "git-keygen",
                                "mountPath": "/var/fluxd/keygen"
                            },
                            {
                                "name": "flux-local-token-mjdmh",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/api/flux/v6/identity.pub",
                                "port": 3030,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 5,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/api/flux/v6/identity.pub",
                                "port": 3030,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 5,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "flux-local",
                "serviceAccount": "flux-local",
                "nodeName": "minikube",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:41:42Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:42:31Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:42:31Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:41:42Z"
                    }
                ],
                "hostIP": "192.168.99.119",
                "podIP": "172.17.0.5",
                "startTime": "2020-03-19T00:41:42Z",
                "containerStatuses": [
                    {
                        "name": "flux",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-19T00:42:23Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "fluxcd/flux:1.15.0",
                        "imageID": "docker-pullable://fluxcd/flux@sha256:ba4bd9ed8ea13ba4aa94d97b6ca285b6f3831fc5861369110dc19f238ac13201",
                        "containerID": "docker://7c2d168b5a49b21493a5661b8e49abc94e49b14001a9d0afdad0e7196d1b9d97"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "flux-local-helm-operator-76c9b48b9c-glvl6",
                "generateName": "flux-local-helm-operator-76c9b48b9c-",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/pods/flux-local-helm-operator-76c9b48b9c-glvl6",
                "uid": "9b5e6524-59e2-477a-ad1e-fa8f610c7659",
                "resourceVersion": "818",
                "creationTimestamp": "2020-03-19T00:41:42Z",
                "labels": {
                    "app": "flux-helm-operator",
                    "pod-template-hash": "76c9b48b9c",
                    "release": "flux-local"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "flux-local-helm-operator-76c9b48b9c",
                        "uid": "cfb742df-853a-4f03-bc3a-56f87927994d",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "sshdir",
                        "configMap": {
                            "name": "flux-local-ssh-config",
                            "defaultMode": 384
                        }
                    },
                    {
                        "name": "git-key",
                        "secret": {
                            "secretName": "git-auth-local",
                            "defaultMode": 256
                        }
                    },
                    {
                        "name": "flux-local-token-mjdmh",
                        "secret": {
                            "secretName": "flux-local-token-mjdmh",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "flux-helm-operator",
                        "image": "docker.io/fluxcd/helm-operator:0.10.1",
                        "args": [
                            "--log-format=fmt",
                            "--git-timeout=200s",
                            "--git-poll-interval=2m",
                            "--charts-sync-interval=3m",
                            "--update-chart-deps=true",
                            "--log-release-diffs=false",
                            "--tiller-namespace=kube-system"
                        ],
                        "ports": [
                            {
                                "name": "http",
                                "containerPort": 3030,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "50m",
                                "memory": "64Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "sshdir",
                                "readOnly": true,
                                "mountPath": "/root/.ssh/known_hosts",
                                "subPath": "known_hosts"
                            },
                            {
                                "name": "git-key",
                                "readOnly": true,
                                "mountPath": "/etc/fluxd/ssh"
                            },
                            {
                                "name": "flux-local-token-mjdmh",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "flux-local",
                "serviceAccount": "flux-local",
                "nodeName": "minikube",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:41:42Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:42:04Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:42:04Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:41:42Z"
                    }
                ],
                "hostIP": "192.168.99.119",
                "podIP": "172.17.0.6",
                "startTime": "2020-03-19T00:41:42Z",
                "containerStatuses": [
                    {
                        "name": "flux-helm-operator",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-19T00:42:04Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "fluxcd/helm-operator:0.10.1",
                        "imageID": "docker-pullable://fluxcd/helm-operator@sha256:1d50c9a65b2b37614d6c0366f43056c862dbc1c5471f72dfe1f3e223fea19eb1",
                        "containerID": "docker://b1af8f7138fabce36cc4332c3d63b12d8d052566bade9ab62b5f9adb2fdba19e"
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "flux-local-memcached-6c5d47fc8c-szhqj",
                "generateName": "flux-local-memcached-6c5d47fc8c-",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/pods/flux-local-memcached-6c5d47fc8c-szhqj",
                "uid": "a4009316-2bd6-4658-bfeb-b13825d0cf3c",
                "resourceVersion": "888",
                "creationTimestamp": "2020-03-19T00:41:42Z",
                "labels": {
                    "app": "flux-memcached",
                    "pod-template-hash": "6c5d47fc8c",
                    "release": "flux-local"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "flux-local-memcached-6c5d47fc8c",
                        "uid": "01125c5a-6894-4099-b683-896b794f04a1",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "default-token-st2x4",
                        "secret": {
                            "secretName": "default-token-st2x4",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "memcached",
                        "image": "memcached:1.5.15",
                        "args": [
                            "-m 512",
                            "-p 11211",
                            "-I 5m"
                        ],
                        "ports": [
                            {
                                "name": "memcached",
                                "containerPort": 11211,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "default-token-st2x4",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "runAsUser": 11211,
                            "runAsGroup": 11211,
                            "allowPrivilegeEscalation": false
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "default",
                "serviceAccount": "default",
                "nodeName": "minikube",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:41:42Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:42:48Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:42:48Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-19T00:41:42Z"
                    }
                ],
                "hostIP": "192.168.99.119",
                "podIP": "172.17.0.7",
                "startTime": "2020-03-19T00:41:42Z",
                "containerStatuses": [
                    {
                        "name": "memcached",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-19T00:42:47Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "memcached:1.5.15",
                        "imageID": "docker-pullable://memcached@sha256:551e40a18e8ec261e2564d31006b09818a15e8e7d8038557177437ac28af9059",
                        "containerID": "docker://c1037bb485ddc2c2f7e7790134762ade14f4abc0b8d198d1e9f040189e17b7b9"
                    }
                ],
                "qosClass": "BestEffort"
            }
        }
    ]
}
==== START logs for container flux of pod default/flux-local-7964ff9f7b-5rsjj ====
Flag --registry-poll-interval has been deprecated, changed to --automation-interval, use that instead
ts=2020-03-19T00:42:23.494297831Z caller=main.go:248 version=1.15.0
ts=2020-03-19T00:42:23.494333885Z caller=main.go:383 msg="using in cluster config to connect to the cluster"
ts=2020-03-19T00:42:23.513189087Z caller=main.go:468 component=cluster identity=/etc/fluxd/ssh/identity
ts=2020-03-19T00:42:23.513280916Z caller=main.go:469 component=cluster identity.pub="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC78owL4R71b2hGCf+Q4sCPgZcA/5dimfRtgeY+uwDjQm4E5FbEwrTQtuQzpY/uzbSeyjWYs67/81fUchgMSp4u+TnwcIjDmkFeU7gQKbjOOazJOfozEwRSDN6aopHtSifX5No/gQIzwtc1c9HinsSEOoHKeaPmPABMvAtWhn2/7Ne132Ib+0HC4pIoZyQbF5dCV8KSbmCgslO50dfqFiGKa8yd7bQhheen7vsuZK68IRKOcy2Fd3tWyoeffWO0jT6ejLnIeAOCcBWQAlIsTEqivRo8tu96F90GVdFl5zwe0+VuDlK0ryxQLXuWsnIB9ARdLEAo6dYenlQhceDwBsXL"
ts=2020-03-19T00:42:23.513336672Z caller=main.go:474 host=https://10.96.0.1:443 version=kubernetes-v1.15.4
ts=2020-03-19T00:42:23.513500026Z caller=main.go:486 kubectl=/usr/local/bin/kubectl
ts=2020-03-19T00:42:23.514091823Z caller=main.go:498 ping=true
ts=2020-03-19T00:42:23.515498628Z caller=main.go:633 url=ssh://git@github.com/craig8/blockchain-automation-framework user="Weave Flux" email=support@weave.works signing-key= verify-signatures=false sync-tag=sync-local state=git readonly=false notes-ref=sync-local set-author=false git-secret=false
ts=2020-03-19T00:42:23.515623826Z caller=main.go:736 upstream="no upstream URL given"
ts=2020-03-19T00:42:23.516759509Z caller=main.go:757 addr=:3030
ts=2020-03-19T00:42:23.51868386Z caller=images.go:17 component=sync-loop msg="polling for new images for automated workloads"
ts=2020-03-19T00:42:23.518887023Z caller=images.go:27 component=sync-loop msg="no automated workloads"
ts=2020-03-19T00:42:23.518957313Z caller=loop.go:101 component=sync-loop err="git repo not ready: git repo has not been cloned yet"
ts=2020-03-19T00:42:24.142294598Z caller=checkpoint.go:21 component=checkpoint msg="update available" latest=1.18.0 URL=https://github.com/fluxcd/flux/releases/tag/1.17.1
ts=2020-03-19T00:42:25.50382402Z caller=memcached.go:112 component=memcached err="Fetching tag from memcache: memcache: connect timeout to 10.103.129.118:11211"
ts=2020-03-19T00:42:25.505332659Z caller=warming.go:162 component=warmer canonical_name=index.docker.io/fluxcd/flux auth={map[]} err="fetching previous result from cache: memcache: connect timeout to 10.103.129.118:11211"
ts=2020-03-19T00:42:26.506064075Z caller=memcached.go:112 component=memcached err="Fetching tag from memcache: memcache: connect timeout to 10.103.129.118:11211"
ts=2020-03-19T00:42:26.506111861Z caller=warming.go:162 component=warmer canonical_name=index.docker.io/fluxcd/helm-operator auth={map[]} err="fetching previous result from cache: memcache: connect timeout to 10.103.129.118:11211"
ts=2020-03-19T00:42:27.506888235Z caller=memcached.go:112 component=memcached err="Fetching tag from memcache: memcache: connect timeout to 10.103.129.118:11211"
ts=2020-03-19T00:42:27.507158406Z caller=warming.go:162 component=warmer canonical_name=index.docker.io/library/memcached auth={map[]} err="fetching previous result from cache: memcache: connect timeout to 10.103.129.118:11211"
ts=2020-03-19T00:42:30.160392248Z caller=memcached.go:112 component=memcached err="Fetching tag from memcache: memcache: connect timeout to 10.103.129.118:11211"
ts=2020-03-19T00:42:30.160446228Z caller=warming.go:162 component=warmer canonical_name=gcr.io/kubernetes-helm/tiller auth={map[]} err="fetching previous result from cache: memcache: connect timeout to 10.103.129.118:11211"
ts=2020-03-19T00:43:25.091559392Z caller=warming.go:198 component=warmer info="refreshing image" image=docker.io/fluxcd/flux tag_count=47 to_update=47 of_which_refresh=0 of_which_missing=47
ts=2020-03-19T00:43:26.907065871Z caller=warming.go:206 component=warmer updated=docker.io/fluxcd/flux successful=47 attempted=47
ts=2020-03-19T00:43:26.907651096Z caller=images.go:17 component=sync-loop msg="polling for new images for automated workloads"
ts=2020-03-19T00:43:26.907756816Z caller=images.go:27 component=sync-loop msg="no automated workloads"
ts=2020-03-19T00:43:28.135787919Z caller=warming.go:198 component=warmer info="refreshing image" image=docker.io/fluxcd/helm-operator tag_count=30 to_update=30 of_which_refresh=0 of_which_missing=30
ts=2020-03-19T00:43:29.601155935Z caller=warming.go:206 component=warmer updated=docker.io/fluxcd/helm-operator successful=30 attempted=30
ts=2020-03-19T00:43:29.602494945Z caller=images.go:17 component=sync-loop msg="polling for new images for automated workloads"
ts=2020-03-19T00:43:29.602589255Z caller=images.go:27 component=sync-loop msg="no automated workloads"
ts=2020-03-19T00:43:31.088129933Z caller=warming.go:198 component=warmer info="refreshing image" image=memcached tag_count=88 to_update=88 of_which_refresh=0 of_which_missing=88
ts=2020-03-19T00:43:33.776640086Z caller=warming.go:206 component=warmer updated=memcached successful=88 attempted=88
ts=2020-03-19T00:43:33.778388668Z caller=images.go:17 component=sync-loop msg="polling for new images for automated workloads"
ts=2020-03-19T00:43:33.778413771Z caller=images.go:27 component=sync-loop msg="no automated workloads"
ts=2020-03-19T00:43:34.413044685Z caller=warming.go:198 component=warmer info="refreshing image" image=gcr.io/kubernetes-helm/tiller tag_count=86 to_update=86 of_which_refresh=0 of_which_missing=86
ts=2020-03-19T00:43:36.275177859Z caller=warming.go:206 component=warmer updated=gcr.io/kubernetes-helm/tiller successful=86 attempted=86
ts=2020-03-19T00:43:36.2763775Z caller=images.go:17 component=sync-loop msg="polling for new images for automated workloads"
ts=2020-03-19T00:43:36.276402571Z caller=images.go:27 component=sync-loop msg="no automated workloads"
ts=2020-03-19T00:44:23.5194484Z caller=loop.go:101 component=sync-loop err="git repo not ready: attempt to push tag: fatal: Could not read from remote repository., full output:\n ERROR: Permission to craig8/blockchain-automation-framework.git denied to deploy key\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n"
==== END logs for container flux of pod default/flux-local-7964ff9f7b-5rsjj ====
==== START logs for container flux-helm-operator of pod default/flux-local-helm-operator-76c9b48b9c-glvl6 ====
W0319 00:42:04.113854       7 client_config.go:549] Neither --kubeconfig nor --master was specified.  Using the inClusterConfig.  This might not work.
ts=2020-03-19T00:42:04.126551623Z caller=helm.go:88 component=helm info="connected to Tiller" version="sem_ver:\"v2.14.1\" git_commit:\"5270352a09c7e8b6e8c9593002a73535276507c0\" git_tree_state:\"clean\" " host=tiller-deploy.kube-system:44134 options="{Host: Port: Namespace:kube-system TLSVerify:false TLSEnable:false TLSKey:/etc/fluxd/helm/tls.key TLSCert:/etc/fluxd/helm/tls.crt TLSCACert: TLSHostname:}"
ts=2020-03-19T00:42:04.127025201Z caller=operator.go:95 component=operator info="setting up event handlers"
ts=2020-03-19T00:42:04.127115258Z caller=operator.go:115 component=operator info="event handlers set up"
ts=2020-03-19T00:42:04.127196275Z caller=main.go:213 component=helm-operator info="waiting for informer caches to sync"
ts=2020-03-19T00:42:04.228398485Z caller=main.go:218 component=helm-operator info="informer caches synced"
ts=2020-03-19T00:42:04.228600681Z caller=chartsync.go:152 component=chartsync info="starting git chart sync loop"
ts=2020-03-19T00:42:04.228695955Z caller=operator.go:127 component=operator info="starting operator"
ts=2020-03-19T00:42:04.228719421Z caller=operator.go:129 component=operator info="starting workers"
ts=2020-03-19T00:42:04.229500848Z caller=server.go:42 component=daemonhttp info="starting HTTP server on :3030"
ts=2020-03-19T00:42:04.687440304Z caller=checkpoint.go:24 component=checkpoint msg="up to date" latest=0.10.1
==== END logs for container flux-helm-operator of pod default/flux-local-helm-operator-76c9b48b9c-glvl6 ====
==== START logs for container memcached of pod default/flux-local-memcached-6c5d47fc8c-szhqj ====
==== END logs for container memcached of pod default/flux-local-memcached-6c5d47fc8c-szhqj ====
Cluster info dumped to standard output
